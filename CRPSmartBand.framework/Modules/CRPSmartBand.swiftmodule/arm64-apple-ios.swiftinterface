// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CRPSmartBand
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import CRPSmartBand
import CoreBluetooth
import CoreLocation
import Dispatch
import Foundation
import MobileCoreServices
import OTAFramework
import RTKOTASDK
import SpeexKit
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import CRPSmartBand.minilzo_Private
import CRPSmartBand.opus_Public
import CRPSmartBand.zipArchive_Public
public enum CRPHTTPMethod : Swift.String {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias CRPParameters = [Swift.String : Any]
public protocol CRPParameterEncoding {
  func encode(_ urlRequest: any CRPSmartBand.CRPURLRequestConvertible, with parameters: CRPSmartBand.CRPParameters?) throws -> Foundation.URLRequest
}
public struct CRPURLEncoding : CRPSmartBand.CRPParameterEncoding {
  public enum Destination {
    case methodDependent, queryString, httpBody
    public static func == (a: CRPSmartBand.CRPURLEncoding.Destination, b: CRPSmartBand.CRPURLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets, noBrackets
    public static func == (a: CRPSmartBand.CRPURLEncoding.ArrayEncoding, b: CRPSmartBand.CRPURLEncoding.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric, literal
    public static func == (a: CRPSmartBand.CRPURLEncoding.BoolEncoding, b: CRPSmartBand.CRPURLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: CRPSmartBand.CRPURLEncoding {
    get
  }
  public static var methodDependent: CRPSmartBand.CRPURLEncoding {
    get
  }
  public static var queryString: CRPSmartBand.CRPURLEncoding {
    get
  }
  public static var httpBody: CRPSmartBand.CRPURLEncoding {
    get
  }
  public let destination: CRPSmartBand.CRPURLEncoding.Destination
  public let arrayEncoding: CRPSmartBand.CRPURLEncoding.ArrayEncoding
  public let boolEncoding: CRPSmartBand.CRPURLEncoding.BoolEncoding
  public init(destination: CRPSmartBand.CRPURLEncoding.Destination = .methodDependent, arrayEncoding: CRPSmartBand.CRPURLEncoding.ArrayEncoding = .brackets, boolEncoding: CRPSmartBand.CRPURLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: any CRPSmartBand.CRPURLRequestConvertible, with parameters: CRPSmartBand.CRPParameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct CRPJSONEncoding : CRPSmartBand.CRPParameterEncoding {
  public static var `default`: CRPSmartBand.CRPJSONEncoding {
    get
  }
  public static var prettyPrinted: CRPSmartBand.CRPJSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: any CRPSmartBand.CRPURLRequestConvertible, with parameters: CRPSmartBand.CRPParameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: any CRPSmartBand.CRPURLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
public struct CRPPropertyListEncoding : CRPSmartBand.CRPParameterEncoding {
  public static var `default`: CRPSmartBand.CRPPropertyListEncoding {
    get
  }
  public static var xml: CRPSmartBand.CRPPropertyListEncoding {
    get
  }
  public static var binary: CRPSmartBand.CRPPropertyListEncoding {
    get
  }
  public let format: Foundation.PropertyListSerialization.PropertyListFormat
  public let options: Foundation.PropertyListSerialization.WriteOptions
  public init(format: Foundation.PropertyListSerialization.PropertyListFormat = .xml, options: Foundation.PropertyListSerialization.WriteOptions = 0)
  public func encode(_ urlRequest: any CRPSmartBand.CRPURLRequestConvertible, with parameters: CRPSmartBand.CRPParameters?) throws -> Foundation.URLRequest
}
public protocol CRPRequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
}
public typealias CRPRequestRetryCompletion = (_ shouldRetry: Swift.Bool, _ timeDelay: Foundation.TimeInterval) -> Swift.Void
public protocol CRPRequestRetrier {
  func should(_ manager: CRPSmartBand.CRPSessionManager, retry request: CRPSmartBand.CRPRequest, with error: any Swift.Error, completion: @escaping CRPSmartBand.CRPRequestRetryCompletion)
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
@_hasMissingDesignatedInitializers open class CRPRequest {
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  open var delegate: CRPSmartBand.CRPTaskDelegate {
    get
  }
  open var task: Foundation.URLSessionTask? {
    get
  }
  final public let session: Foundation.URLSession
  open var request: Foundation.URLRequest? {
    get
  }
  open var response: Foundation.HTTPURLResponse? {
    get
  }
  open var retryCount: Swift.UInt {
    get
  }
  @discardableResult
  open func authenticate(user: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  open func authenticate(usingCredential credential: Foundation.URLCredential) -> Self
  open class func authorizationHeader(user: Swift.String, password: Swift.String) -> (key: Swift.String, value: Swift.String)?
  open func resume()
  open func suspend()
  open func cancel()
  @objc deinit
}
extension CRPSmartBand.CRPRequest : Swift.CustomStringConvertible {
  open var description: Swift.String {
    get
  }
}
extension CRPSmartBand.CRPRequest : Swift.CustomDebugStringConvertible {
  open var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class CRPDataRequest : CRPSmartBand.CRPRequest {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  @discardableResult
  open func stream(closure: ((Foundation.Data) -> Swift.Void)? = nil) -> Self
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping CRPSmartBand.CRPDataRequest.ProgressHandler) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class CRPDownloadRequest : CRPSmartBand.CRPRequest {
  public struct DownloadOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt
    public static let createIntermediateDirectories: CRPSmartBand.CRPDownloadRequest.DownloadOptions
    public static let removePreviousFile: CRPSmartBand.CRPDownloadRequest.DownloadOptions
    public init(rawValue: Swift.UInt)
    public typealias ArrayLiteralElement = CRPSmartBand.CRPDownloadRequest.DownloadOptions
    public typealias Element = CRPSmartBand.CRPDownloadRequest.DownloadOptions
    public typealias RawValue = Swift.UInt
  }
  public typealias DownloadFileDestination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: CRPSmartBand.CRPDownloadRequest.DownloadOptions)
  override open var request: Foundation.URLRequest? {
    get
  }
  open var resumeData: Foundation.Data? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  override open func cancel()
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping CRPSmartBand.CRPDownloadRequest.ProgressHandler) -> Self
  open class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask) -> CRPSmartBand.CRPDownloadRequest.DownloadFileDestination
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class CRPUploadRequest : CRPSmartBand.CRPDataRequest {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var uploadProgress: Foundation.Progress {
    get
  }
  @discardableResult
  open func uploadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping CRPSmartBand.CRPUploadRequest.ProgressHandler) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
open class CRPStreamRequest : CRPSmartBand.CRPRequest {
  @objc deinit
}
public struct PixelData {
}
public protocol CRPDataResponseSerializerProtocol {
  associatedtype SerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, (any Swift.Error)?) -> CRPSmartBand.CRPResult<Self.SerializedObject> { get }
}
public struct CRPDataResponseSerializer<Value> : CRPSmartBand.CRPDataResponseSerializerProtocol {
  public typealias SerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, (any Swift.Error)?) -> CRPSmartBand.CRPResult<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, (any Swift.Error)?) -> CRPSmartBand.CRPResult<Value>)
}
public protocol CRPDownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, (any Swift.Error)?) -> CRPSmartBand.CRPResult<Self.SerializedObject> { get }
}
public struct CRPDownloadResponseSerializer<Value> : CRPSmartBand.CRPDownloadResponseSerializerProtocol {
  public typealias SerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, (any Swift.Error)?) -> CRPSmartBand.CRPResult<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, (any Swift.Error)?) -> CRPSmartBand.CRPResult<Value>)
}
extension CRPSmartBand.CRPDataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (CRPSmartBand.CRPDefaultDataResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (CRPSmartBand.CRPDataResponse<T.SerializedObject>) -> Swift.Void) -> Self where T : CRPSmartBand.CRPDataResponseSerializerProtocol
}
extension CRPSmartBand.CRPDownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (CRPSmartBand.CRPDefaultDownloadResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (CRPSmartBand.CRPDownloadResponse<T.SerializedObject>) -> Swift.Void) -> Self where T : CRPSmartBand.CRPDownloadResponseSerializerProtocol
}
extension CRPSmartBand.CRPRequest {
  public static func serializeResponseData(response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) -> CRPSmartBand.CRPResult<Foundation.Data>
}
extension CRPSmartBand.CRPDataRequest {
  public static func dataResponseSerializer() -> CRPSmartBand.CRPDataResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (CRPSmartBand.CRPDataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension CRPSmartBand.CRPDownloadRequest {
  public static func dataResponseSerializer() -> CRPSmartBand.CRPDownloadResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (CRPSmartBand.CRPDownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension CRPSmartBand.CRPRequest {
  public static func serializeResponseString(encoding: Swift.String.Encoding?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) -> CRPSmartBand.CRPResult<Swift.String>
}
extension CRPSmartBand.CRPDataRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> CRPSmartBand.CRPDataResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (CRPSmartBand.CRPDataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension CRPSmartBand.CRPDownloadRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> CRPSmartBand.CRPDownloadResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (CRPSmartBand.CRPDownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
extension CRPSmartBand.CRPRequest {
  public static func serializeResponseJSON(options: Foundation.JSONSerialization.ReadingOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) -> CRPSmartBand.CRPResult<Any>
}
extension CRPSmartBand.CRPDataRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> CRPSmartBand.CRPDataResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (CRPSmartBand.CRPDataResponse<Any>) -> Swift.Void) -> Self
}
extension CRPSmartBand.CRPDownloadRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> CRPSmartBand.CRPDownloadResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (CRPSmartBand.CRPDownloadResponse<Any>) -> Swift.Void) -> Self
}
extension CRPSmartBand.CRPRequest {
  public static func serializeResponsePropertyList(options: Foundation.PropertyListSerialization.ReadOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) -> CRPSmartBand.CRPResult<Any>
}
extension CRPSmartBand.CRPDataRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> CRPSmartBand.CRPDataResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (CRPSmartBand.CRPDataResponse<Any>) -> Swift.Void) -> Self
}
extension CRPSmartBand.CRPDownloadRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> CRPSmartBand.CRPDownloadResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (CRPSmartBand.CRPDownloadResponse<Any>) -> Swift.Void) -> Self
}
@objc @_inheritsConvenienceInitializers @objcMembers open class CRPUpgradeUI : ObjectiveC.NSObject {
  @objc open var fileUrl: Swift.String!
  @objc public static let sharedInstance: CRPSmartBand.CRPUpgradeUI
  @objc open func startUpgrade(_ fileUrlString: Swift.String = "", bandStartPosition: Swift.Int = 0)
  @objc open func doUpgrade()
  @objc open func startUpgradeFromFile(path: Swift.String, position: Swift.Int = 0, upgradeCount: Swift.Int = 0, bandStartPosition: Swift.Int = 0)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol CRPManagerDelegate {
  @objc func didState(_ state: CRPSmartBand.CRPState)
  @objc func didBluetoothState(_ state: CRPSmartBand.CRPBluetoothState)
  @objc func receiveSteps(_ model: CRPSmartBand.StepModel)
  @objc func receiveHeartRate(_ heartRate: Swift.Int)
  @objc func receiveRealTimeHeartRate(_ heartRate: Swift.Int, _ rri: Swift.Int)
  @objc func receiveHeartRateAll(_ model: CRPSmartBand.HeartModel)
  @objc func receiveBloodPressure(_ heartRate: Swift.Int, _ sbp: Swift.Int, _ dbp: Swift.Int)
  @objc func receiveSpO2(_ o2: Swift.Int)
  @objc func receiveUpgrede(_ state: CRPSmartBand.CRPUpgradeState, _ progress: Swift.Int)
  @objc func receiveUpgradeScreen(_ state: CRPSmartBand.CRPUpgradeState, _ progress: Swift.Int)
  @objc func recevieTakePhoto()
  @objc optional func recevieWeather()
  @objc optional func recevieFindPhone(_ state: Swift.Int)
  @objc optional func receiveECGDate(_ state: CRPSmartBand.ecgState, _ data: [Swift.UInt32], completeTime: Swift.Int)
  @objc optional func receiveRealTimeTemperature(_ temp: Swift.Double)
  @objc optional func receiveTemperature(_ state: Swift.Int)
  @objc optional func receiveCalling()
  @objc optional func receviceHRVRealTime(_ model: CRPSmartBand.CRPHRVDataModel)
  @objc optional func receivePhoneNumber(number: Swift.String)
  @objc optional func receiveMedicineInfo(_ max: Swift.Int, _ model: CRPSmartBand.CRPMedicineReminderModel?)
  @objc optional func receiveSportList(_ list: [CRPSmartBand.CRPSportRecord])
  @objc optional func receiveSportState(_ state: CRPSmartBand.SportType, _ err: Swift.Int)
  @objc optional func receiveConnectConfirm(_ state: CRPSmartBand.CRPPairState)
  @objc optional func receiveStress(_ stress: Swift.Int)
  @objc optional func receiveHRV(_ hrv: Swift.Int)
  @objc optional func receiveGPSDataRecordList(time: [Swift.Int])
  @objc optional func receiveGPSRealTime(location: CoreLocation.CLLocationCoordinate2D)
  @objc optional func receiveGPSAuxiliaryRequest()
  @objc optional func receiveEPORequest(type: Swift.Int)
  @objc optional func receiveEPOSync(_ state: CRPSmartBand.CRPUpgradeState, _ progress: Swift.Int)
  @objc optional func receiveRealTimeSportData(data: CRPSmartBand.CRPNewSportingModel)
  @objc optional func receiveExitCameraView()
  @objc optional func receiveAddDrinkWaterRecord(record: CRPSmartBand.CRPNewDrinkWaterRecord)
  @objc optional func receiveModifyDrinkWaterRecord(source: CRPSmartBand.CRPDrinkWaterSource, record: CRPSmartBand.CRPNewDrinkWaterRecord)
  @objc optional func receiveDeleteDrinkWaterRecord(source: CRPSmartBand.CRPDrinkWaterSource, recordID: Swift.Int)
  @objc optional func receiveRequestAppDrinkWaterRecord()
  @objc optional func receiveStockRequestUpdateInfo()
  @objc optional func receiveGPTState(type: CRPSmartBand.CRPGPTType, state: CRPSmartBand.CRPGPTRequestState, result: Foundation.NSData)
  @objc optional func receiveRequestGPTAnswer()
  @objc optional func receiveRequestGPTPreviewImage(imageSize: CoreFoundation.CGSize)
  @objc optional func receiveRequestGPTImage()
}
public enum CRPResult<Value> {
  case success(Value)
  case failure(any Swift.Error)
  public var isSuccess: Swift.Bool {
    get
  }
  public var isFailure: Swift.Bool {
    get
  }
  public var value: Value? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
}
extension CRPSmartBand.CRPResult : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension CRPSmartBand.CRPResult : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension CRPSmartBand.CRPResult {
  public init(value: () throws -> Value)
  public func unwrap() throws -> Value
  public func map<T>(_ transform: (Value) -> T) -> CRPSmartBand.CRPResult<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> CRPSmartBand.CRPResult<T>
  public func mapError<T>(_ transform: (any Swift.Error) -> T) -> CRPSmartBand.CRPResult<Value> where T : Swift.Error
  public func flatMapError<T>(_ transform: (any Swift.Error) throws -> T) -> CRPSmartBand.CRPResult<Value> where T : Swift.Error
  @discardableResult
  public func withValue(_ closure: (Value) -> Swift.Void) -> CRPSmartBand.CRPResult<Value>
  @discardableResult
  public func withError(_ closure: (any Swift.Error) -> Swift.Void) -> CRPSmartBand.CRPResult<Value>
  @discardableResult
  public func ifSuccess(_ closure: () -> Swift.Void) -> CRPSmartBand.CRPResult<Value>
  @discardableResult
  public func ifFailure(_ closure: () -> Swift.Void) -> CRPSmartBand.CRPResult<Value>
}
public func == (lhs: CRPSmartBand.CRPDiscovery, rhs: CRPSmartBand.CRPDiscovery) -> Swift.Bool
@objc @objcMembers public class CRPDiscovery : ObjectiveC.NSObject {
  @objc public var localName: Swift.String? {
    @objc get
  }
  @objc public var kCABAdvidataLocalName: Swift.String?
  @objc final public let advertisementData: [Swift.String : Swift.AnyObject]
  @objc final public let remotePeripheral: CoreBluetooth.CBPeripheral
  @objc final public let RSSI: Swift.Int
  @objc public var mac: Swift.String?
  @objc public var ver: Swift.String
  @objc public var platform: CRPSmartBand.CRPPlatform
  @objc public var chip: Swift.Int
  @objc public var isPair: Swift.Bool
  @objc public var isTalk: Swift.Bool
  @objc public var scan_code_bind: Swift.Bool
  @objc public init(advertisementData: [Swift.String : Swift.AnyObject], remotePeripheral: CoreBluetooth.CBPeripheral, RSSI: Swift.Int)
  @objc public init(remotePeripheral: CoreBluetooth.CBPeripheral, mac: Swift.String)
  @objc deinit
}
@objc public enum CRPPlatform : Swift.Int {
  case None = 0
  case Nordic = 1
  case Huntersun = 2
  case Realtek = 3
  case Goodix = 4
  case Sifli = 5
  case JieLi = 6
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CRPNordicChip : Swift.Int {
  case None = 0
  case nRF_51822 = 1
  case nRF_52832 = 2
  case nRF_52810 = 3
  case nRF_52840 = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CRPHuntersunChip : Swift.Int {
  case None = 0
  case HS_6620D_A3 = 1
  case HS_6620D_A4 = 2
  case HS_6621 = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CRPRealtekChip : Swift.Int {
  case None = 0
  case RTL_8762CK = 1
  case RTL_8762CW = 2
  case RTL_8762D = 3
  case RTL_8763E = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CRPGoodixChip : Swift.Int {
  case None = 0
  case GR_5515 = 1
  case GR_5525 = 2
  case GR_5526 = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CRPSifliChip : Swift.Int {
  case None = 0
  case SF_551 = 1
  case SF_555 = 2
  case SF_6600 = 3
  case SF_6700 = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CRPJieLiChip : Swift.Int {
  case None = 0
  case JL_701n = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
open class CRPServerTrustPolicyManager {
  final public let policies: [Swift.String : CRPSmartBand.CRPServerTrustPolicy]
  public init(policies: [Swift.String : CRPSmartBand.CRPServerTrustPolicy])
  open func serverTrustPolicy(forHost host: Swift.String) -> CRPSmartBand.CRPServerTrustPolicy?
  @objc deinit
}
public enum CRPServerTrustPolicy {
  case performDefaultEvaluation(validateHost: Swift.Bool)
  case performRevokedEvaluation(validateHost: Swift.Bool, revocationFlags: CoreFoundation.CFOptionFlags)
  case pinCertificates(certificates: [Security.SecCertificate], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case pinPublicKeys(publicKeys: [Security.SecKey], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case disableEvaluation
  case customEvaluation((_ serverTrust: Security.SecTrust, _ host: Swift.String) -> Swift.Bool)
  public static func certificates(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecCertificate]
  public static func publicKeys(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecKey]
  public func evaluate(_ serverTrust: Security.SecTrust, forHost host: Swift.String) -> Swift.Bool
}
public protocol CRPURLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : CRPSmartBand.CRPURLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : CRPSmartBand.CRPURLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : CRPSmartBand.CRPURLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol CRPURLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension CRPSmartBand.CRPURLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : CRPSmartBand.CRPURLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: any CRPSmartBand.CRPURLConvertible, method: CRPSmartBand.CRPHTTPMethod, headers: CRPSmartBand.HTTPHeaders? = nil) throws
}
@discardableResult
public func request(_ url: any CRPSmartBand.CRPURLConvertible, method: CRPSmartBand.CRPHTTPMethod = .get, parameters: CRPSmartBand.CRPParameters? = nil, encoding: any CRPSmartBand.CRPParameterEncoding = CRPURLEncoding.default, headers: CRPSmartBand.HTTPHeaders? = nil) -> CRPSmartBand.CRPDataRequest
@discardableResult
public func request(_ urlRequest: any CRPSmartBand.CRPURLRequestConvertible) -> CRPSmartBand.CRPDataRequest
@discardableResult
public func download(_ url: any CRPSmartBand.CRPURLConvertible, method: CRPSmartBand.CRPHTTPMethod = .get, parameters: CRPSmartBand.CRPParameters? = nil, encoding: any CRPSmartBand.CRPParameterEncoding = CRPURLEncoding.default, headers: CRPSmartBand.HTTPHeaders? = nil, to destination: CRPSmartBand.CRPDownloadRequest.DownloadFileDestination? = nil) -> CRPSmartBand.CRPDownloadRequest
@discardableResult
public func download(_ urlRequest: any CRPSmartBand.CRPURLRequestConvertible, to destination: CRPSmartBand.CRPDownloadRequest.DownloadFileDestination? = nil) -> CRPSmartBand.CRPDownloadRequest
@discardableResult
public func download(resumingWith resumeData: Foundation.Data, to destination: CRPSmartBand.CRPDownloadRequest.DownloadFileDestination? = nil) -> CRPSmartBand.CRPDownloadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, to url: any CRPSmartBand.CRPURLConvertible, method: CRPSmartBand.CRPHTTPMethod = .post, headers: CRPSmartBand.HTTPHeaders? = nil) -> CRPSmartBand.CRPUploadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, with urlRequest: any CRPSmartBand.CRPURLRequestConvertible) -> CRPSmartBand.CRPUploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, to url: any CRPSmartBand.CRPURLConvertible, method: CRPSmartBand.CRPHTTPMethod = .post, headers: CRPSmartBand.HTTPHeaders? = nil) -> CRPSmartBand.CRPUploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, with urlRequest: any CRPSmartBand.CRPURLRequestConvertible) -> CRPSmartBand.CRPUploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, to url: any CRPSmartBand.CRPURLConvertible, method: CRPSmartBand.CRPHTTPMethod = .post, headers: CRPSmartBand.HTTPHeaders? = nil) -> CRPSmartBand.CRPUploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, with urlRequest: any CRPSmartBand.CRPURLRequestConvertible) -> CRPSmartBand.CRPUploadRequest
public func upload(multipartFormData: @escaping (CRPSmartBand.CRPMultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = CRPSessionManager.multipartFormDataEncodingMemoryThreshold, to url: any CRPSmartBand.CRPURLConvertible, method: CRPSmartBand.CRPHTTPMethod = .post, headers: CRPSmartBand.HTTPHeaders? = nil, encodingCompletion: ((CRPSmartBand.CRPSessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
public func upload(multipartFormData: @escaping (CRPSmartBand.CRPMultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = CRPSessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: any CRPSmartBand.CRPURLRequestConvertible, encodingCompletion: ((CRPSmartBand.CRPSessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
@discardableResult
public func stream(withHostName hostName: Swift.String, port: Swift.Int) -> CRPSmartBand.CRPStreamRequest
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
@discardableResult
public func stream(with netService: Foundation.NetService) -> CRPSmartBand.CRPStreamRequest
@objc @objcMembers public class Binary : ObjectiveC.NSObject {
  @objc public var readingOffset: Swift.Int
  @objc public init(bytes: [Swift.UInt8])
  @objc public var bytes: [Swift.UInt8] {
    @objc get
    @objc set
  }
  @objc public init(data: Foundation.Data)
  @objc public func bit(_ position: Swift.Int) -> Swift.Int
  @objc public func bits(_ range: Foundation.NSRange) -> Swift.Int
  @objc public func bits(_ start: Swift.Int, _ length: Swift.Int) -> Swift.Int
  @objc public func byte(_ position: Swift.Int) -> Swift.Int
  @objc public func bytes(_ start: Swift.Int, _ length: Swift.Int) -> [Swift.UInt8]
  @objc public func getBytes(_ start: Swift.Int, _ length: Swift.Int) -> Swift.Int
  @objc public func getCount(_ position: Swift.Int) -> Swift.Int
  @objc public func getUInt32(_ start: Swift.Int) -> Swift.UInt32
  @objc public func getBytesBE(_ start: Swift.Int, _ length: Swift.Int) -> Swift.Int
  @objc public func getInt32BE(_ start: Swift.Int, _ length: Swift.Int) -> Swift.Int32
  @objc public func getGPSInt32BE(_ start: Swift.Int, _ length: Swift.Int) -> Swift.Int32
  @objc public func putData(data: Foundation.Data)
  @objc public func putUInt8(_ value: Swift.UInt8)
  @objc public func putUInt16(_ value: Swift.UInt32)
  @objc public func getUInt8(_ start: Swift.Int) -> Swift.Int
  @objc public func getUInt16BE(_ start: Swift.Int) -> Swift.Int
  @objc public func getUInt16LE(_ start: Swift.Int) -> Swift.Int
  @objc public func bitsWithInternalOffsetAvailable(_ length: Swift.Int) -> Swift.Bool
  @objc public func next(bits length: Swift.Int) -> Swift.Int
  @objc public func bytesWithInternalOffsetAvailable(_ length: Swift.Int) -> Swift.Bool
  @objc public func next(bytes length: Swift.Int) -> [Swift.UInt8]
  @objc deinit
}
extension CRPSmartBand.CRPRequest {
  public enum ValidationResult {
    case success
    case failure(any Swift.Error)
  }
}
extension CRPSmartBand.CRPDataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> CRPSmartBand.CRPRequest.ValidationResult
  @discardableResult
  public func validate(_ validation: @escaping CRPSmartBand.CRPDataRequest.Validation) -> Self
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension CRPSmartBand.CRPDownloadRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ temporaryURL: Foundation.URL?, _ destinationURL: Foundation.URL?) -> CRPSmartBand.CRPRequest.ValidationResult
  @discardableResult
  public func validate(_ validation: @escaping CRPSmartBand.CRPDownloadRequest.Validation) -> Self
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
@objc @_hasMissingDesignatedInitializers open class CRPTaskDelegate : ObjectiveC.NSObject {
  final public let queue: Foundation.OperationQueue
  public var data: Foundation.Data? {
    get
  }
  public var error: (any Swift.Error)?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPScreenTagModel : ObjectiveC.NSObject {
  @objc public var tag_name: Swift.String?
  @objc public var id: Swift.Int
  @objc public var faces: [CRPSmartBand.CRPScreenModel]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPScreenModel : ObjectiveC.NSObject {
  @objc public var uploader: Swift.String?
  @objc public var name: Swift.String?
  @objc public var id: Swift.Int
  @objc public var download: Swift.Int
  @objc public var file: Swift.String?
  @objc public var size: Swift.Int
  @objc public var preview: Swift.String?
  @objc public var remark_lang: Swift.String?
  @objc public var remark_cn: Swift.String?
  @objc public var remark_en: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPScreenModelInfo : ObjectiveC.NSObject {
  @objc public var uploader: Swift.String?
  @objc public var name: Swift.String?
  @objc public var id: Swift.Int
  @objc public var download: Swift.Int
  @objc public var file: Swift.String?
  @objc public var size: Swift.Int
  @objc public var preview: Swift.String?
  @objc public var remark_lang: Swift.String?
  @objc public var remark_cn: Swift.String?
  @objc public var remark_en: Swift.String?
  @objc public var face_list: [CRPSmartBand.CRPScreenModel]
  @objc deinit
}
public struct CRPTimeline {
  public let requestStartTime: CoreFoundation.CFAbsoluteTime
  public let initialResponseTime: CoreFoundation.CFAbsoluteTime
  public let requestCompletedTime: CoreFoundation.CFAbsoluteTime
  public let serializationCompletedTime: CoreFoundation.CFAbsoluteTime
  public let latency: Foundation.TimeInterval
  public let requestDuration: Foundation.TimeInterval
  public let serializationDuration: Foundation.TimeInterval
  public let totalDuration: Foundation.TimeInterval
  public init(requestStartTime: CoreFoundation.CFAbsoluteTime = 0.0, initialResponseTime: CoreFoundation.CFAbsoluteTime = 0.0, requestCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0, serializationCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0)
}
extension CRPSmartBand.CRPTimeline : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension CRPSmartBand.CRPTimeline : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
open class CRPSessionManager {
  public enum MultipartFormDataEncodingResult {
    case success(request: CRPSmartBand.CRPUploadRequest, streamingFromDisk: Swift.Bool, streamFileURL: Foundation.URL?)
    case failure(any Swift.Error)
  }
  public static let `default`: CRPSmartBand.CRPSessionManager
  public static let defaultHTTPHeaders: CRPSmartBand.HTTPHeaders
  public static let multipartFormDataEncodingMemoryThreshold: Swift.UInt64
  final public let session: Foundation.URLSession
  final public let delegate: CRPSmartBand.CRPSessionDelegate
  open var startRequestsImmediately: Swift.Bool
  open var adapter: (any CRPSmartBand.CRPRequestAdapter)?
  open var retrier: (any CRPSmartBand.CRPRequestRetrier)? {
    get
    set
  }
  open var backgroundCompletionHandler: (() -> Swift.Void)?
  public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.default, delegate: CRPSmartBand.CRPSessionDelegate = CRPSessionDelegate(), serverTrustPolicyManager: CRPSmartBand.CRPServerTrustPolicyManager? = nil)
  public init?(session: Foundation.URLSession, delegate: CRPSmartBand.CRPSessionDelegate, serverTrustPolicyManager: CRPSmartBand.CRPServerTrustPolicyManager? = nil)
  @objc deinit
  @discardableResult
  open func request(_ url: any CRPSmartBand.CRPURLConvertible, method: CRPSmartBand.CRPHTTPMethod = .get, parameters: CRPSmartBand.CRPParameters? = nil, encoding: any CRPSmartBand.CRPParameterEncoding = CRPURLEncoding.default, headers: CRPSmartBand.HTTPHeaders? = nil) -> CRPSmartBand.CRPDataRequest
  @discardableResult
  open func request(_ urlRequest: any CRPSmartBand.CRPURLRequestConvertible) -> CRPSmartBand.CRPDataRequest
  @discardableResult
  open func download(_ url: any CRPSmartBand.CRPURLConvertible, method: CRPSmartBand.CRPHTTPMethod = .get, parameters: CRPSmartBand.CRPParameters? = nil, encoding: any CRPSmartBand.CRPParameterEncoding = CRPURLEncoding.default, headers: CRPSmartBand.HTTPHeaders? = nil, to destination: CRPSmartBand.CRPDownloadRequest.DownloadFileDestination? = nil) -> CRPSmartBand.CRPDownloadRequest
  @discardableResult
  open func download(_ urlRequest: any CRPSmartBand.CRPURLRequestConvertible, to destination: CRPSmartBand.CRPDownloadRequest.DownloadFileDestination? = nil) -> CRPSmartBand.CRPDownloadRequest
  @discardableResult
  open func download(resumingWith resumeData: Foundation.Data, to destination: CRPSmartBand.CRPDownloadRequest.DownloadFileDestination? = nil) -> CRPSmartBand.CRPDownloadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, to url: any CRPSmartBand.CRPURLConvertible, method: CRPSmartBand.CRPHTTPMethod = .post, headers: CRPSmartBand.HTTPHeaders? = nil) -> CRPSmartBand.CRPUploadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, with urlRequest: any CRPSmartBand.CRPURLRequestConvertible) -> CRPSmartBand.CRPUploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, to url: any CRPSmartBand.CRPURLConvertible, method: CRPSmartBand.CRPHTTPMethod = .post, headers: CRPSmartBand.HTTPHeaders? = nil) -> CRPSmartBand.CRPUploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, with urlRequest: any CRPSmartBand.CRPURLRequestConvertible) -> CRPSmartBand.CRPUploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, to url: any CRPSmartBand.CRPURLConvertible, method: CRPSmartBand.CRPHTTPMethod = .post, headers: CRPSmartBand.HTTPHeaders? = nil) -> CRPSmartBand.CRPUploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, with urlRequest: any CRPSmartBand.CRPURLRequestConvertible) -> CRPSmartBand.CRPUploadRequest
  open func upload(multipartFormData: @escaping (CRPSmartBand.CRPMultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = CRPSessionManager.multipartFormDataEncodingMemoryThreshold, to url: any CRPSmartBand.CRPURLConvertible, method: CRPSmartBand.CRPHTTPMethod = .post, headers: CRPSmartBand.HTTPHeaders? = nil, encodingCompletion: ((CRPSmartBand.CRPSessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  open func upload(multipartFormData: @escaping (CRPSmartBand.CRPMultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = CRPSessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: any CRPSmartBand.CRPURLRequestConvertible, encodingCompletion: ((CRPSmartBand.CRPSessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(withHostName hostName: Swift.String, port: Swift.Int) -> CRPSmartBand.CRPStreamRequest
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(with netService: Foundation.NetService) -> CRPSmartBand.CRPStreamRequest
}
public struct CRPDefaultDataResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let error: (any Swift.Error)?
  public let timeline: CRPSmartBand.CRPTimeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?, timeline: CRPSmartBand.CRPTimeline = CRPTimeline(), metrics: Swift.AnyObject? = nil)
}
public struct CRPDataResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let result: CRPSmartBand.CRPResult<Value>
  public let timeline: CRPSmartBand.CRPTimeline
  public var value: Value? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, result: CRPSmartBand.CRPResult<Value>, timeline: CRPSmartBand.CRPTimeline = CRPTimeline())
}
extension CRPSmartBand.CRPDataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension CRPSmartBand.CRPDataResponse {
  public func map<T>(_ transform: (Value) -> T) -> CRPSmartBand.CRPDataResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> CRPSmartBand.CRPDataResponse<T>
  public func mapError<E>(_ transform: (any Swift.Error) -> E) -> CRPSmartBand.CRPDataResponse<Value> where E : Swift.Error
  public func flatMapError<E>(_ transform: (any Swift.Error) throws -> E) -> CRPSmartBand.CRPDataResponse<Value> where E : Swift.Error
}
public struct CRPDefaultDownloadResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let error: (any Swift.Error)?
  public let timeline: CRPSmartBand.CRPTimeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, error: (any Swift.Error)?, timeline: CRPSmartBand.CRPTimeline = CRPTimeline(), metrics: Swift.AnyObject? = nil)
}
public struct CRPDownloadResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let result: CRPSmartBand.CRPResult<Value>
  public let timeline: CRPSmartBand.CRPTimeline
  public var value: Value? {
    get
  }
  public var error: (any Swift.Error)? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, result: CRPSmartBand.CRPResult<Value>, timeline: CRPSmartBand.CRPTimeline = CRPTimeline())
}
extension CRPSmartBand.CRPDownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension CRPSmartBand.CRPDownloadResponse {
  public func map<T>(_ transform: (Value) -> T) -> CRPSmartBand.CRPDownloadResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> CRPSmartBand.CRPDownloadResponse<T>
  public func mapError<E>(_ transform: (any Swift.Error) -> E) -> CRPSmartBand.CRPDownloadResponse<Value> where E : Swift.Error
  public func flatMapError<E>(_ transform: (any Swift.Error) throws -> E) -> CRPSmartBand.CRPDownloadResponse<Value> where E : Swift.Error
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension CRPSmartBand.CRPDefaultDataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension CRPSmartBand.CRPDataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension CRPSmartBand.CRPDefaultDownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension CRPSmartBand.CRPDownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class CRPSessionDelegate : ObjectiveC.NSObject {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, (any Swift.Error)?) -> Swift.Void)?
  open var sessionDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var sessionDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var sessionDidFinishEventsForBackgroundURLSession: ((Foundation.URLSession) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Foundation.URLRequest?)?
  open var taskWillPerformHTTPRedirectionWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest, @escaping (Foundation.URLRequest?) -> Swift.Void) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var taskDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Foundation.InputStream?)?
  open var taskNeedNewBodyStreamWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, @escaping (Foundation.InputStream?) -> Swift.Void) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, (any Swift.Error)?) -> Swift.Void)?
  open var dataTaskDidReceiveResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse) -> Foundation.URLSession.ResponseDisposition)?
  open var dataTaskDidReceiveResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse, @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void) -> Swift.Void)?
  open var dataTaskDidBecomeDownloadTask: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLSessionDownloadTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)?
  open var dataTaskWillCacheResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse, @escaping (Foundation.CachedURLResponse?) -> Swift.Void) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskReadClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskWriteClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskBetterRouteDiscovered: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskDidBecomeInputAndOutputStreams: ((Foundation.URLSession, Foundation.URLSessionStreamTask, Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? {
    get
    set
  }
  open subscript(task: Foundation.URLSessionTask) -> CRPSmartBand.CRPRequest? {
    get
    set
  }
  @objc override dynamic public init()
  @objc override dynamic open func responds(to selector: ObjectiveC.Selector) -> Swift.Bool
  @objc deinit
}
extension CRPSmartBand.CRPSessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: (any Swift.Error)?)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSessionDidFinishEvents(forBackgroundURLSession session: Foundation.URLSession)
}
extension CRPSmartBand.CRPSessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
  @objc(URLSession:task:didFinishCollectingMetrics:) dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
}
extension CRPSmartBand.CRPSessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didBecome downloadTask: Foundation.URLSessionDownloadTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension CRPSmartBand.CRPSessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
}
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
extension CRPSmartBand.CRPSessionDelegate : Foundation.URLSessionStreamDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, readClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, writeClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, betterRouteDiscoveredFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, streamTask: Foundation.URLSessionStreamTask, didBecome inputStream: Foundation.InputStream, outputStream: Foundation.OutputStream)
}
@objc public protocol BleProtocol {
  @objc optional func didDiscover(_ name: Swift.String, rssi: Foundation.NSNumber)
  @objc optional func didConnect()
  @objc optional func didSyncing()
  @objc optional func didDisconnect()
  @objc optional func didBleReady()
  @objc optional func didReadRSSI(_ rssi: Foundation.NSNumber)
  @objc optional func didConnected()
  @objc optional func didDiscoverCharacteristics(_ peripheral: CoreBluetooth.CBPeripheral, characteristic: CoreBluetooth.CBCharacteristic)
  @objc optional func didUpdateValueForCharacteristic(_ characteristic: CoreBluetooth.CBCharacteristic)
  @objc optional func stateChange(_ central: CoreBluetooth.CBCentralManager)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers open class CRPBle : ObjectiveC.NSObject, CoreBluetooth.CBCentralManagerDelegate, CoreBluetooth.CBPeripheralDelegate {
  @objc public static let wechatServiceUUID: CoreBluetooth.CBUUID
  @objc public static let enServiceUUID: CoreBluetooth.CBUUID
  @objc public static let ttServiceUUID: CoreBluetooth.CBUUID
  @objc public static let mh08ServiceUUID: CoreBluetooth.CBUUID
  @objc public var OTAWirteQueue: Dispatch.DispatchQueue
  @objc public static let sharedInstance: CRPSmartBand.CRPBle
  @objc open var delegate: (any CRPSmartBand.BleProtocol)?
  @objc open func scanWithDuration(_ duration: Foundation.TimeInterval = 3, progressHandler: CRPSmartBand.scanProgressHandler?, completionHandler: CRPSmartBand.scanCompletionHandler?)
  @objc open func breakScan()
  @objc open func disConnect()
  @objc open func disConnectOnce()
  @objc open func sendByte(_ value: Swift.UInt8)
  @objc open func sendString(_ value: Swift.String)
  @objc open func connectedPeripherial() -> [CoreBluetooth.CBPeripheral]
  @objc open func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc open func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, willRestoreState dict: [Swift.String : Any])
  @objc open func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc open func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc open func centralManager(_ central: CoreBluetooth.CBCentralManager, didRetrievePeripherals peripherals: CoreBluetooth.CBPeripheral)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didReadRSSI RSSI: Foundation.NSNumber, error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class HTXBle : ObjectiveC.NSObject, CoreBluetooth.CBCentralManagerDelegate, CoreBluetooth.CBPeripheralDelegate {
  public static let wechatServiceUUID: CoreBluetooth.CBUUID
  public static let enServiceUUID: CoreBluetooth.CBUUID
  public static let ttServiceUUID: CoreBluetooth.CBUUID
  public static let mh08ServiceUUID: CoreBluetooth.CBUUID
  public static let sharedInstance: CRPSmartBand.HTXBle
  open var delegate: (any CRPSmartBand.BleProtocol)?
  open func scanWithDuration(_ duration: Foundation.TimeInterval = 3, progressHandler: CRPSmartBand.scanProgressHandler?, completionHandler: CRPSmartBand.scanCompletionHandler?)
  open func breakScan()
  open func disConnect()
  @objc open func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc open func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc open func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc open func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc open func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor descriptor: CoreBluetooth.CBDescriptor, error: (any Swift.Error)?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class HTXUpgrade : ObjectiveC.NSObject, OTAFramework.OtaDelegate {
  open var mOtaLib: OTAFramework.OTALib!
  public static let sharedInstance: CRPSmartBand.HTXUpgrade
  @objc override dynamic public init()
  @objc public func packetDataCallBack(_ data: Foundation.NSMutableData!, charcType: OTAFramework.typeCode)
  @objc public func progressCallBack(_ progress: Swift.Float)
  @objc public func readAddrCallBack(_ type: OTAFramework.typeCode, addr: Swift.Int32, length: Swift.Int32)
  open func NotifyResponse(data: Foundation.NSMutableData, category: Swift.Int)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class CRPSmartBandSDK : ObjectiveC.NSObject, CRPSmartBand.CRPManagerDelegate {
  @objc public static let sharedInstance: CRPSmartBand.CRPSmartBandSDK
  @objc open var delegate: (any CRPSmartBand.CRPManagerDelegate)?
  open var hasBlood: Swift.Int!
  @objc open var currentCRPDiscovery: CRPSmartBand.CRPDiscovery? {
    @objc get
  }
  @objc open var HTXScanTimer: Foundation.Timer!
  @objc open var mac: Swift.String!
  @objc open var HTXScanTime: Swift.Int
  @objc public func didState(_ state: CRPSmartBand.CRPState)
  @objc public func didBluetoothState(_ state: CRPSmartBand.CRPBluetoothState)
  @objc public func receiveSteps(_ model: CRPSmartBand.StepModel)
  @objc public func receiveHeartRate(_ heartRate: Swift.Int)
  @objc public func receiveHeartRateAll(_ model: CRPSmartBand.HeartModel)
  @objc public func receiveBloodPressure(_ heartRate: Swift.Int, _ sbp: Swift.Int, _ dbp: Swift.Int)
  @objc public func receiveSpO2(_ o2: Swift.Int)
  @objc public func receiveRealTimeHeartRate(_ heartRate: Swift.Int, _ rri: Swift.Int)
  @objc public func receiveUpgrede(_ state: CRPSmartBand.CRPUpgradeState, _ progress: Swift.Int)
  @objc public func receiveUpgradeScreen(_ state: CRPSmartBand.CRPUpgradeState, _ progress: Swift.Int)
  @objc public func recevieTakePhoto()
  @objc public func recevieWeather()
  @objc public func recevieFindPhone(_ state: Swift.Int)
  @objc public func receiveECGDate(_ state: CRPSmartBand.ecgState, _ data: [Swift.UInt32], completeTime: Swift.Int)
  @objc public func receiveRealTimeTemperature(_ temp: Swift.Double)
  @objc public func receiveTemperature(_ state: Swift.Int)
  @objc public func receiveCalling()
  @objc public func receviceHRVRealTime(_ model: CRPSmartBand.CRPHRVDataModel)
  @objc public func receivePhoneNumber(number: Swift.String)
  @objc public func receiveMedicineInfo(_ max: Swift.Int, _ model: CRPSmartBand.CRPMedicineReminderModel?)
  @objc public func receiveSportList(_ list: [CRPSmartBand.CRPSportRecord])
  @objc public func receiveSportState(_ state: CRPSmartBand.SportType, _ err: Swift.Int)
  @objc public func receiveConnectConfirm(_ state: CRPSmartBand.CRPPairState)
  @objc public func receiveStress(_ stress: Swift.Int)
  @objc public func receiveHRV(_ hrv: Swift.Int)
  @objc public func receiveGPSDataRecordList(time: [Swift.Int])
  @objc public func receiveGPSRealTime(location: CoreLocation.CLLocationCoordinate2D)
  @objc public func receiveGPSAuxiliaryRequest()
  @objc public func receiveEPORequest(type: Swift.Int)
  @objc public func receiveEPOSync(_ state: CRPSmartBand.CRPUpgradeState, _ progress: Swift.Int)
  @objc public func receiveRealTimeSportData(data: CRPSmartBand.CRPNewSportingModel)
  @objc public func receiveExitCameraView()
  @objc public func receiveAddDrinkWaterRecord(record: CRPSmartBand.CRPNewDrinkWaterRecord)
  @objc public func receiveModifyDrinkWaterRecord(source: CRPSmartBand.CRPDrinkWaterSource, record: CRPSmartBand.CRPNewDrinkWaterRecord)
  @objc public func receiveDeleteDrinkWaterRecord(source: CRPSmartBand.CRPDrinkWaterSource, recordID: Swift.Int)
  @objc public func receiveRequestAppDrinkWaterRecord()
  @objc public func receiveStockRequestUpdateInfo()
  @objc public func receiveGPTState(type: CRPSmartBand.CRPGPTType, state: CRPSmartBand.CRPGPTRequestState, result: Foundation.NSData)
  @objc public func receiveRequestGPTAnswer()
  @objc public func receiveRequestGPTPreviewImage(imageSize: CoreFoundation.CGSize)
  @objc public func receiveRequestGPTImage()
  @objc open func scan(_ duration: Foundation.TimeInterval = 3, progressHandler: CRPSmartBand.scanProgressHandler?, completionHandler: CRPSmartBand.scanCompletionHandler?)
  @objc open func interruptScan()
  @objc open func connet(_ discovery: CRPSmartBand.CRPDiscovery)
  @objc open func reConnet()
  @objc open func disConnet()
  @objc open func remove(_ handler: @escaping CRPSmartBand.removeHandler)
  @objc open func getSteps(_ handler: @escaping CRPSmartBand.stepHandler)
  @objc open func getSleepData(_ handler: @escaping CRPSmartBand.sleepHandler)
  @objc open func getSleepDataWithREM(_ handler: @escaping CRPSmartBand.sleepHandler)
  @objc open func getSportData(_ handler: @escaping CRPSmartBand.sportHandler)
  @objc open func getAllData(_ handler: @escaping CRPSmartBand.allDataHandler)
  @objc open func getAllDataWithREM(_ handler: @escaping CRPSmartBand.allDataHandler)
  @objc open func getFeatures(_ handler: @escaping CRPSmartBand.featuresHandler)
  @objc open func getBattery(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getSoftver(_ handler: @escaping CRPSmartBand.stringHandler)
  @objc open func getGoal(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getDominantHand(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getProfile(_ handler: @escaping CRPSmartBand.profileHandler)
  @objc open func getDial(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getLanguage(_ handler: @escaping CRPSmartBand.intHandler, _ supportLanguagesHander: @escaping CRPSmartBand.intsHandler)
  @objc open func getRemindersToMove(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getAlarms(_ handler: @escaping CRPSmartBand.alarmHandler)
  @objc open func getQuickView(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getUnit(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getTimeformat(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getMac(_ handler: @escaping CRPSmartBand.stringHandler)
  @objc open func getNotifications(_ handler: @escaping CRPSmartBand.notificationsHandler)
  @objc open func getViews(_ handler: @escaping CRPSmartBand.intsHandler)
  @objc open func get24HourHeartRateInterval(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func get24HourHeartRate(_ handler: @escaping CRPSmartBand.intsHandler)
  @objc open func getAgo24HourHeartRate(_ handler: @escaping CRPSmartBand.intsHandler)
  @objc open func getFullDayHeartRate(_ handler: @escaping CRPSmartBand.fulldayDataHanlder)
  @objc open func getQuickViewTime(_ handler: @escaping CRPSmartBand.periodTimeHandler)
  @objc open func getDisturbTime(_ handler: @escaping CRPSmartBand.periodTimeHandler)
  @objc open func getScreenContent(_ handler: @escaping CRPSmartBand.screenContentHandler)
  @objc open func getConnectedBand(_ handler: (_ peripherals: [CoreBluetooth.CBPeripheral], _ error: CRPSmartBand.CRPError) -> Swift.Void)
  @objc open func getHeartData()
  @objc open func getPhysiological(_ handler: @escaping CRPSmartBand.physiologicalHandler)
  @objc open func getSitRemindInfo(_ handler: @escaping CRPSmartBand.sitRemindHandler)
  @objc open func setFindDevice()
  @objc open func setQuickView(_ isOn: Swift.Bool)
  @objc open func setTimeFormat(_ type: Swift.Int)
  @objc open func setDominantHand(_ type: Swift.Int)
  @objc open func setDial(_ type: Swift.Int)
  @objc open func setUnit(_ unit: Swift.Int)
  open func setNotification(_ switchs: [CRPSmartBand.NotificationType])
  @objc open func setRemindersToMove(_ isOn: Swift.Bool)
  @objc open func setProfile(_ profile: CRPSmartBand.ProfileModel)
  @objc open func setGoal(_ goal: Swift.Int)
  @objc open func sendCalibration()
  @objc open func setLanguage(_ lang: Swift.Int)
  @objc open func setLanguageVersion(_ isChinese: Swift.Bool)
  @objc open func setStartHeart()
  @objc open func setStopHeart()
  @objc open func setStartSingleHR()
  @objc open func setStopSingleHR()
  @objc open func setStartSpO2()
  @objc open func setStopSpO2()
  @objc open func setStartBlood()
  @objc open func setStopBlood()
  @objc open func setCalibrationBlood(_ heartRate: Swift.Int = 0, _ SBP: Swift.Int = 0, _ DBP: Swift.Int = 0)
  @objc open func setMessage(_ message: Swift.String)
  @objc open func setViews(_ views: [Swift.Int])
  @objc open func set24HourHeartRate(_ interval: Swift.Int)
  @objc open func setAlarm(_ alarm: CRPSmartBand.AlarmModel)
  @objc open func setWeather(_ weather: CRPSmartBand.weather)
  @objc open func setForecastWeather(_ weathers: [CRPSmartBand.forecastWeather])
  @objc open func setQuickViewTime(_ periodTime: CRPSmartBand.periodTimeModel)
  @objc open func setDisturbTime(_ periodTime: CRPSmartBand.periodTimeModel)
  @objc open func setSitRemind(_ sitRemind: CRPSmartBand.SitRemindModel)
  @objc open func checkLatest(_ version: Swift.String, _ mac: Swift.String, handler: @escaping CRPSmartBand.versionHandler)
  @objc open func startUpgrede(info: CRPSmartBand.newVersionInfo)
  @objc open func startUpgradeFromFile(path: Swift.String)
  @objc open func startGoodixUpgradeFromFile(zipPath: Swift.String)
  @objc open func checkDFUState(_ handler: @escaping CRPSmartBand.stringHandler)
  @objc open func stopUpgrade()
  @objc open func startChangeScreen(_ image: UIKit.UIImage, _ imageSize: CRPSmartBand.ScreenImageSize, _ isCricle: Swift.Bool = false, _ compressionType: Swift.Int)
  @objc open func stopChangeScreen()
  @objc open func setupScreenContent(content: CRPSmartBand.ScreenContent)
  @objc open func setStepLength(length: Swift.Int)
  @objc open func setTime(_ timestamp: Swift.Int = 0)
  @objc open func switchCameraView()
  @objc open func connectedPeripherial() -> [CoreBluetooth.CBPeripheral]
  @objc open func shutDown()
  @objc open func getWatchFaceSupportModel(_ handler: @escaping CRPSmartBand.watchFaceSupportHandler)
  @objc open func getWatchFaceInfo(_ supportModel: [Swift.Int], currentPage: Swift.Int, perPage: Swift.Int, _ handler: @escaping CRPSmartBand.watchFaceHandler)
  @objc open func startChangeWatchFace(_ Info: CRPSmartBand.watchFaceInfo, _ watchFaceID: Swift.Int = 0)
  @objc open func startChangeWatchFaceFromFile(path: Swift.String, _ watchFaceID: Swift.Int = 0)
  @objc open func stopChangeWatchFace()
  @objc open func getOTAMac(_ handler: @escaping CRPSmartBand.stringHandler)
  @objc open func startHTXOTA(info: CRPSmartBand.newVersionInfo, upgradeMac: Swift.String, isUser: Swift.Bool, _ isPatch: Swift.Bool = true)
  @objc open func stopHTXOTA()
  @objc open func HTXConnect(discovery: CRPSmartBand.CRPDiscovery, isFromLocal: Swift.Bool, url: Swift.String, isUser: Swift.Bool)
  @objc open func startOTAFromFile(mac: Swift.String!, zipFilePath: Swift.String, isUser: Swift.Bool, _ isPatch: Swift.Bool = true)
  @objc open func reconnectHTX(OTAMac: Swift.String)
  @objc open func getWatchFaceInfoByID(_ id: Swift.Int, _ handler: @escaping CRPSmartBand.watchFaceHandler)
  @objc open func fatigueReminder()
  @objc open func get24HourSteps(_ handler: @escaping CRPSmartBand.intsHandler)
  @objc open func getAgo24HourSteps(_ handler: @escaping CRPSmartBand.intsHandler)
  @objc open func setPhysiological(_ physiological: CRPSmartBand.Physiological)
  @objc open func startECGMeasure()
  @objc open func stopECGMeasure()
  @objc open func isNewECGMeasurementVersion() -> Swift.Bool
  @objc open func getLastMeasureECGData()
  @objc open func sendECGHeartRate(heartRate: Swift.Int)
  @objc open func getAutoTemperatureState(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func sendAutoTemperature(_ isOpen: Swift.Bool)
  @objc open func sendSingleTemperatureStart()
  @objc open func sendSingleTemperatureEnd()
  @objc open func getAutoTemperatureData(_ todayHandler: @escaping CRPSmartBand.doublesHandler, _ yesterdayHandler: @escaping CRPSmartBand.doublesHandler)
  @objc open func sendFirstConnect()
  @objc open func sendCityName(_ cityName: Swift.String)
  @objc open func getAutoLockTime(_ handler: @escaping CRPSmartBand.autoLockTimeHandler)
  @objc open func sendAutoLockTime(_ time: Swift.Int)
  @objc open func stopFindPhone()
  @objc open func sendFindingPhone()
  @objc open func getHeartRateRemind(_ handler: @escaping CRPSmartBand.hrRemindHandler)
  @objc open func sendHeartRateRemind(_ remind: CRPSmartBand.hrRemind)
  @objc open func getHandWashRemind(_ handler: @escaping CRPSmartBand.reminderHandler)
  @objc open func sendHandWashRemind(_ remind: CRPSmartBand.eventRemind)
  @objc open func getDrinkWaterRemind(_ handler: @escaping CRPSmartBand.drinkWaterHandler)
  @objc open func sendDrinkWaterRemind(_ remind: CRPSmartBand.drinkWaterRemind)
  @objc open func getTemperatureUnit(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func setTemperatureUnit(_ unit: Swift.Int)
  @objc open func startRealTekUpgrade(info: CRPSmartBand.newVersionInfo, timeoutInterval: Foundation.TimeInterval = 5)
  @objc open func startRealTekUpgradeFromFile(path: Swift.String, timeoutInterval: Foundation.TimeInterval = 5)
  @objc open func getAutoO2Interval(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func setAutoO2(_ interval: Swift.Int)
  @objc open func getAutoO2Data(_ todayHandler: @escaping CRPSmartBand.intsHandler, _ yesterdayHandler: @escaping CRPSmartBand.intsHandler)
  @objc open func getContactProfile(_ handler: @escaping CRPSmartBand.contactProfileHandler)
  @objc open func setContact(profile: CRPSmartBand.contactProfileModel, contacts: [CRPSmartBand.CRPContact])
  @objc open func cleanAllContact()
  @objc open func deleteContact(contactID: Swift.Int)
  @objc open func getContactSupportVer(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func startTpUpgrade(tpInfo: CRPSmartBand.newVersionTpInfo?)
  @objc open func startTpUpgradeFromFile(path: Swift.String, _ offset: Swift.Int = 0x886000)
  @objc open func setHRV(_ interval: Swift.Int)
  @objc open func getHRVInterval(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getHRVCount(_ dayIndex: Swift.Int, _ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getHRVData(_ dayIndex: Swift.Int, _ index: Swift.Int, _ handler: @escaping CRPSmartBand.hrvDataHandler)
  @objc open func startHRVMeasure()
  @objc open func stopHRVMeasure()
  @objc open func reset()
  @objc open func setPowerSaveState(open: Swift.Bool)
  @objc open func getPowerSaveState(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getContactCount(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func exitCameraView()
  @objc open func setFullDayO2Status(open: Swift.Bool)
  @objc open func getFullDayO2Status(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getFullDayO2Data(_ handler: @escaping CRPSmartBand.intsHandler)
  @objc open func setFullDayBPStatus(open: Swift.Bool)
  @objc open func getFullDayBPStatus(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getFullDayBPData(_ handler: @escaping CRPSmartBand.intsHandler)
  @objc open func setFullDayTemperatureStatus(open: Swift.Bool)
  @objc open func getFullDayTemperatureStatus(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getFullDayTemperatureData(_ handler: @escaping CRPSmartBand.doublesHandler)
  @objc open func getMedicineInfo()
  @objc open func setMedicine(medicine: CRPSmartBand.CRPMedicineReminderModel)
  @objc open func deleteMedicine(id: Swift.Int)
  @objc open func deleteAllMedicine()
  @objc open func getHeartRecordData(_ handler: @escaping CRPSmartBand.heartRecordDataHandler)
  @objc open func getBPRecordData(_ handler: @escaping CRPSmartBand.bpRecordDataHandler)
  @objc open func getO2RecordData(_ handler: @escaping CRPSmartBand.o2RecordDataHandler)
  @objc open func setTapToWake(open: Swift.Bool)
  @objc open func readTapToWake(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getSportRecordList()
  @objc open func getSportRecordData(id: Swift.Int, _ handler: @escaping CRPSmartBand.sportDetailHandler)
  @objc open func setSportState(state: CRPSmartBand.SportType)
  @objc open func setNewVerWeather(weather: CRPSmartBand.CRPNewWeather)
  @objc open func getTalkBluetoothConnectState(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func setA2DPControl(state: Swift.Int)
  @objc open func getTalkBluetoothName(_ handler: @escaping CRPSmartBand.stringHandler)
  @objc open func connectConfirm(data: [Swift.UInt8])
  @objc open func connectConfirmByRandomCode(randomCode: Swift.Int)
  @objc open func setPairReply(allow: Swift.Bool)
  @objc open func getNotificationSupportType(_ handler: @escaping CRPSmartBand.notificationsHandler)
  @objc open func getNotificationState(_ handler: @escaping CRPSmartBand.notificationsHandler)
  @objc open func setNotificationState(_ states: [Swift.Int])
  @objc open func setNewVerAlarm(_ alarm: CRPSmartBand.AlarmModel)
  @objc open func setNewVerAddAlarm(_ alarm: CRPSmartBand.AlarmModel)
  @objc open func setNewVerDeleteAlarm(_ id: Swift.Int)
  @objc open func setNewVerDeleteAllAlarm()
  @objc open func getNewVerAlarm(_ handler: @escaping CRPSmartBand.alarmHandler)
  @objc open func getStressIsSupport(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func setStartStress()
  @objc open func setStopStress()
  @objc open func getStressRecord(_ handler: @escaping CRPSmartBand.stressRecordDataHandler)
  @objc open func getHRVIsSupport(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func setStartHRV()
  @objc open func setStopHRV()
  @objc open func getHRVRecord(_ handler: @escaping CRPSmartBand.hrvRecordDataHandler)
  @objc open func setNormalExerciseGoal(_ goals: CRPSmartBand.CRPExerciseGoalsModel)
  @objc open func getNormalExerciseGoal(_ handler: @escaping CRPSmartBand.exerciseGoalDateHandler)
  @objc open func setExerciseDayGoal(_ goals: CRPSmartBand.CRPExerciseGoalsModel)
  @objc open func getExerciseDayGoal(_ handler: @escaping CRPSmartBand.exerciseGoalDateHandler)
  @objc open func setExerciseState(_ state: CRPSmartBand.CRPExerciseGoalStateModel)
  @objc open func getExerciseState(_ handler: @escaping CRPSmartBand.exerciseGoalStateHandler)
  @objc open func setECard(profile: CRPSmartBand.CRPEcardProfileModel, eCard: CRPSmartBand.CRPECard)
  @objc open func deleteECard(id: Swift.Int)
  @objc open func getECardProfile(handler: @escaping CRPSmartBand.eCardProfileHandler)
  @objc open func getECardInfo(id: Swift.Int, _ handler: @escaping CRPSmartBand.eCardInfoHandler)
  @objc open func setECardSequenceArray(ids: [Swift.Int])
  @objc open func getGPSDataRecordList()
  @objc open func getGPSRecordData(time: Swift.Int, _ handler: @escaping CRPSmartBand.gpsDataHandler)
  @objc open func startSyncEPO(path: Swift.String, type: Swift.Int)
  @objc open func syncGPSAuxiliary(local: CoreLocation.CLLocationCoordinate2D)
  @objc open func getHistoryStepData(day: Swift.Int, handler: @escaping CRPSmartBand.historyStpeHander)
  @objc open func getHistorySleepData(day: Swift.Int, handler: @escaping CRPSmartBand.historySleepHandler)
  @objc open func getHistoryHrData(day: Swift.Int, handler: @escaping CRPSmartBand.historyHrHandler)
  @objc open func setVibrationStrength(type: Swift.Int)
  @objc open func getVibrationStrength(handler: @escaping CRPSmartBand.intHandler)
  @objc open func setSleepTime(info: CRPSmartBand.CRPSleepDetectionInfo)
  @objc open func getSleepTime(handler: @escaping CRPSmartBand.sleepDetectionInfoHandler)
  @objc open func get24HourCals(_ handler: @escaping CRPSmartBand.intsHandler)
  @objc open func getAgo24HourCals(_ handler: @escaping CRPSmartBand.intsHandler)
  @objc open func get24HourDistances(_ handler: @escaping CRPSmartBand.intsHandler)
  @objc open func getAgo24HourDistances(_ handler: @escaping CRPSmartBand.intsHandler)
  @objc open func getAutoStressInterval(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func setAutoStress(_ interval: Swift.Int)
  @objc open func getTodayAutoStressData(_ handler: @escaping CRPSmartBand.intsHandler)
  @objc open func getYesterDayAutoStressData(_ handler: @escaping CRPSmartBand.intsHandler)
  @objc open func retrievePeripherals(identifier: Foundation.UUID) -> [CoreBluetooth.CBPeripheral]
  @objc open func getUDTMaxSize(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func removeBond()
  @objc open func getDeviceMode(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func setDeviceUserMode()
  @objc open func getDevicePlatformInfo(_ handler: @escaping CRPSmartBand.platformInfoHandler)
  @objc open func getJLScreenMarketVersionInfo(_ handler: @escaping CRPSmartBand.screenMarketVersionInfoHandler)
  @objc open func getNewWatchFaceTagList(supportModel: [Swift.Int], ver: Swift.String, currentPage: Swift.Int, perPage: Swift.Int, memorySize: Swift.Int, platform: CRPSmartBand.CRPPlatform, model: CRPSmartBand.CRPScreenMarketVersionModel, _ handler: @escaping CRPSmartBand.watchFaceTagListHandler)
  @objc open func getNewWatchFaceList(tag_id: Swift.Int, ver: Swift.String, supportModel: [Swift.Int], currentPage: Swift.Int, perPage: Swift.Int, memorySize: Swift.Int, platform: CRPSmartBand.CRPPlatform, model: CRPSmartBand.CRPScreenMarketVersionModel, _ handler: @escaping CRPSmartBand.watchFaceListHandler)
  @objc open func getNewWatchFaceInfo(screenId: Swift.Int, ver: Swift.String, supportModel: [Swift.Int], memorySize: Swift.Int, platform: CRPSmartBand.CRPPlatform, model: CRPSmartBand.CRPScreenMarketVersionModel, _ handler: @escaping CRPSmartBand.watchFaceInfoHandler)
  @objc open func getNewWatchFaceSupportModel(_ handler: @escaping CRPSmartBand.newWatchFaceSupportHandler)
  open func setCalendar(calendar: CRPSmartBand.CRPCalendarModel)
  open func getCalendar(id: Swift.Int, handler: @escaping CRPSmartBand.calendarHandler)
  @objc open func deleteCalendar(id: Swift.Int)
  open func getCalendarConfig(handler: @escaping CRPSmartBand.calendarConfigHandler)
  open func setCalendarReminder(model: CRPSmartBand.CRPCalendarRemindModel)
  open func getCalendarReminder(handler: @escaping CRPSmartBand.calendarRemindHandler)
  @objc open func deleteAllCalendar()
  @objc open func getWorldClockInfo(_ handler: @escaping CRPSmartBand.worldClockProfileHandler)
  @objc open func getWorldClockDetail(id: Swift.Int, _ handler: @escaping CRPSmartBand.worldClockInfoHandler)
  @objc open func setWorldClock(worldClock: CRPSmartBand.CRPWorldClockModel)
  @objc open func deleteWorldClock(id: Swift.Int)
  @objc open func setWorldClockSequence(ids: [Swift.Int])
  @objc open func setClearWorldClock()
  @objc open func getBrightnessInfo(_ handler: @escaping CRPSmartBand.brightnessInfoHandler)
  @objc open func setBrightness(value: Swift.Int)
  @objc open func getEmergencyContact(_ handler: @escaping CRPSmartBand.emergencyContactHandler)
  @objc open func setEmergencyContact(contact: CRPSmartBand.CRPEmergencyContact)
  @objc open func setDrinkWaterGoal(goal: Swift.Int)
  @objc open func getDrinkWaterGoal(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func setTodayDrinkWaterTotalValue(value: Swift.Int)
  @objc open func getTodayDrinkWaterTotalValue(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func addDrinkWater(record: CRPSmartBand.CRPNewDrinkWaterRecord)
  @objc open func modifyDrinkWater(source: CRPSmartBand.CRPDrinkWaterSource, record: CRPSmartBand.CRPNewDrinkWaterRecord)
  @objc open func deleteDrinkWater(source: CRPSmartBand.CRPDrinkWaterSource, recordID: Swift.Int)
  @objc open func getDrinkWaterRecord(_ handler: @escaping CRPSmartBand.drinkWaterRecordHandler)
  @objc open func setDrinkWaterRecord(records: [CRPSmartBand.CRPNewDrinkWaterRecord])
  @objc open func readNewDrinkWaterRemind(_ handler: @escaping CRPSmartBand.newDrinkWaterRemindHandler)
  @objc open func setNewDrinkWaterRemind(model: CRPSmartBand.CRPNewDrinkWaterRemind)
  @objc open func setSOSSwitch(open: Swift.Bool)
  @objc open func getSOSSwitch(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func getStockSupportInfo(_ handler: @escaping CRPSmartBand.intHandler)
  @objc open func setNullStockData()
  @objc open func setStockData(data: CRPSmartBand.CRPStockSelectionModel)
  @objc open func deleteStock(id: Swift.Int)
  @objc open func setStockSequence(ids: [Swift.Int])
  @objc open func getGPTSupportType(_ handler: @escaping CRPSmartBand.gptSupportTypeHandler)
  @objc open func setGPTState(type: CRPSmartBand.CRPGPTType, state: CRPSmartBand.CRPGPTReplyState)
  @objc open func setGPTQuestion(type: CRPSmartBand.CRPGPTType, content: Swift.String)
  @objc open func setGPTAnswer(content: Swift.String)
  @objc open func setGPTPreImage(image: UIKit.UIImage)
  @objc open func stopGPTPreImage()
  @objc open func startGPTScreen(_ image: UIKit.UIImage, _ imageSize: CRPSmartBand.ScreenImageSize, _ isCricle: Swift.Bool = false, _ compressionType: Swift.Int)
  @objc open func stopGPTScreen()
  @objc open func getGPTScreenContent(_ handler: @escaping CRPSmartBand.screenContentHandler)
  @objc open func setupGPTScreenContent(content: CRPSmartBand.ScreenContent)
  @objc deinit
}
open class CRPMultipartFormData {
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  final public let boundary: Swift.String
  public init()
  public func append(_ data: Foundation.Data, withName name: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, mimeType: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: CRPSmartBand.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers open class CRPNetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(CRPSmartBand.CRPNetworkReachabilityManager.ConnectionType)
  }
  public enum ConnectionType {
    case ethernetOrWiFi
    case wwan
    public static func == (a: CRPSmartBand.CRPNetworkReachabilityManager.ConnectionType, b: CRPSmartBand.CRPNetworkReachabilityManager.ConnectionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Listener = (CRPSmartBand.CRPNetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnWWAN: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  open var networkReachabilityStatus: CRPSmartBand.CRPNetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  open var listenerQueue: Dispatch.DispatchQueue
  open var listener: CRPSmartBand.CRPNetworkReachabilityManager.Listener?
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var previousFlags: SystemConfiguration.SCNetworkReachabilityFlags
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening() -> Swift.Bool
  open func stopListening()
}
extension CRPSmartBand.CRPNetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
}
public func == (lhs: CRPSmartBand.CRPNetworkReachabilityManager.NetworkReachabilityStatus, rhs: CRPSmartBand.CRPNetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
extension Foundation.NSNotification.Name {
  public struct Task {
    public static let DidResume: Foundation.Notification.Name
    public static let DidSuspend: Foundation.Notification.Name
    public static let DidCancel: Foundation.Notification.Name
    public static let DidComplete: Foundation.Notification.Name
  }
}
extension Foundation.Notification {
  public struct CRPKey {
    public static let Task: Swift.String
    public static let ResponseData: Swift.String
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CRPUpgrade : ObjectiveC.NSObject {
  @objc public static let sharedInstance: CRPSmartBand.CRPUpgrade
  @objc open func checkLatest(_ version: Swift.String, _ mac: Swift.String)
  @objc open func startUpgrade(info: CRPSmartBand.newVersionInfo?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum CRPState : Swift.Int {
  case unbind
  case connecting
  case connected
  case disconnecting
  case disconnected
  case syncing
  case syncSuccess
  case syncError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CRPBluetoothState : Swift.Int {
  case unknown
  case resetting
  case unsupported
  case unauthorized
  case poweredOff
  case poweredOn
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc indirect public enum CRPError : Swift.Int {
  case none
  case disconnected
  case busy
  case timeout
  case interrupted
  case internalError
  case noCentralManagerSet
  case other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
indirect public enum CRPErrorHandle : Swift.Error {
  case none
  case disconnected
  case busy
  case timeout
  case interrupted
  case internalError(underlyingError: (any Swift.Error)?)
  case noCentralManagerSet
  case other
}
@objc public enum CRPOptions : Swift.Int {
  case battery
  case softver
  case goal
  case dominantHand
  case timeformat
  case dial
  case language
  case remindersToMove
  case quickView
  case unit
  case mac
  case views
  case heart24
  case heart24Interval
  case fulldayheart
  case isUpgrade
  case OTAMac
  case temperature24
  case autoLockTime
  case temperatureUnit
  case autoO2
  case todayAutoO2
  case yesterdataAutoO2
  case upgradeType
  case hrvInterval
  case hrvCount
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CRPFeature : Swift.Int {
  case HR
  case BP
  case weather
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class StepModel : ObjectiveC.NSObject {
  @objc public var steps: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var calory: Swift.Int
  @objc public var time: Swift.Int
  @objc public init(steps: Swift.Int, distance: Swift.Int, calory: Swift.Int, _ time: Swift.Int = -1)
  @objc deinit
}
@objc @objcMembers public class SleepModel : ObjectiveC.NSObject {
  @objc public var deep: Swift.Int
  @objc public var light: Swift.Int
  @objc public var detail: [Swift.Dictionary<Swift.String, Swift.String>]
  @objc public var timestamp: Swift.Int
  @objc public init(deep: Swift.Int, light: Swift.Int, detail: [Swift.Dictionary<Swift.String, Swift.String>])
  @objc deinit
}
@objc @objcMembers public class SportModel : ObjectiveC.NSObject {
  @objc public var date: Swift.String
  @objc public var startTime: Swift.Int
  @objc public var endTime: Swift.Int
  @objc public var vaildTime: Swift.Int
  @objc public var type: CRPSmartBand.SportType
  @objc public var step: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var kcal: Swift.Int
  @objc public init(date: Swift.String, startTime: Swift.Int, endTime: Swift.Int, vaildTime: Swift.Int, type: CRPSmartBand.SportType, step: Swift.Int, distance: Swift.Int, kcal: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class ProfileModel : ObjectiveC.NSObject {
  @objc public var height: Swift.Int
  @objc public var weight: Swift.Int
  @objc public var age: Swift.Int
  @objc public var gender: CRPSmartBand.GenderOption
  @objc public init(height: Swift.Int, weight: Swift.Int, age: Swift.Int, gender: CRPSmartBand.GenderOption)
  @objc deinit
}
@objc public enum GenderOption : Swift.Int {
  case male
  case female
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class AlarmModel : ObjectiveC.NSObject {
  @objc public var id: Swift.Int
  @objc public var enable: Swift.Int
  @objc public var type: CRPSmartBand.AlarmType
  @objc public var hour: Swift.Int
  @objc public var minute: Swift.Int
  @objc public var year: Swift.Int
  @objc public var month: Swift.Int
  @objc public var day: Swift.Int
  @objc public var weekday: [Swift.Int]
  @objc public init(id: Swift.Int, enable: Swift.Int, type: CRPSmartBand.AlarmType, hour: Swift.Int, minute: Swift.Int, year: Swift.Int, month: Swift.Int, day: Swift.Int, weekday: [Swift.Int])
  @objc deinit
}
@objc public enum AlarmType : Swift.Int {
  case once
  case everyday
  case weekly
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CRPWeekDay : Swift.Int {
  case none
  case mon
  case tue
  case wed
  case thu
  case fri
  case sat
  case sun
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SportType : Swift.Int {
  case walking = 0
  case run = 1
  case cycling = 2
  case skipping = 3
  case badminton = 4
  case basketball = 5
  case football = 6
  case swimming = 7
  case hiking = 8
  case tennis = 9
  case rugby = 10
  case golf = 11
  case yoga = 12
  case workout = 13
  case dance = 14
  case baseball = 15
  case elliptical = 16
  case indoorCycling = 17
  case training = 18
  case rowingMachine = 19
  case trailRun = 20
  case ski = 21
  case bowling = 22
  case dumbbells = 23
  case sit_ups = 24
  case onfoot = 25
  case indoorWalk = 26
  case indoorRun = 27
  case cricket = 28
  case kabaddi = 29
  case gps_Walking = 30
  case gps_Run = 31
  case gps_Cycling = 32
  case gps_TrailRun = 33
  case gps_Onfoot = 34
  case Sailing = 35
  case Water_Polo = 36
  case Other_Water_Sports = 37
  case Paddle_Boarding = 38
  case Water_Skiing = 39
  case Kayaking = 40
  case Rafting = 41
  case Rowing = 42
  case Powerboating = 43
  case Finswimming = 44
  case Diving = 45
  case Artistic_Swimming = 46
  case Snorkeling = 47
  case Kitesurfing = 48
  case Open_Water_Swim = 49
  case Rock_Climbing = 50
  case Skateboarding = 51
  case Roller_Skating = 52
  case Parkour = 53
  case ATV = 54
  case Paragliding = 55
  case Triathlon = 56
  case Stair_Climber = 57
  case Stair_Climbing = 58
  case Stepper = 59
  case Core_Training = 60
  case Flexibility = 61
  case Pilates = 62
  case Gymnastics = 63
  case Stretching = 64
  case Strength = 65
  case Cross_Training = 66
  case Aerobics = 67
  case Physical_Training = 68
  case Wall_Ball = 69
  case Barbell = 70
  case Deadlift = 71
  case UpperBody = 72
  case Functional_Training = 73
  case Burpee = 74
  case Back = 75
  case Lower_Body = 76
  case Abs = 77
  case HIIT = 78
  case Weightlifting = 79
  case Square_Dancing = 80
  case Belly_Dance = 81
  case Ballet = 82
  case Zumba = 83
  case Latin_Dance = 84
  case Street_Dance = 85
  case Folk_Dance = 86
  case Jazz_Dance = 87
  case Boxing = 88
  case Wrestling = 89
  case Martial_Arts = 90
  case Tai_Chi = 91
  case Muay_Thai = 92
  case Judo = 93
  case Taekwondo = 94
  case Karate = 95
  case Kickboxing = 96
  case Fencing = 97
  case Kendo = 98
  case Volleyball = 99
  case Softball = 100
  case Hockey = 101
  case Table_Tennis = 102
  case Handball = 103
  case Squash = 104
  case Billiards = 105
  case Shuttlecock = 106
  case Beach_Soccer = 107
  case Beach_Volleyball = 108
  case Sepak_Takraw = 109
  case Ice_Skating = 110
  case Curling = 111
  case Other_Winter_Sports = 112
  case Snowmobile = 113
  case Ice_Hockey = 114
  case Bobsleigh = 115
  case Sledding = 116
  case Archery = 117
  case Darts = 118
  case Tug_of_War = 119
  case Hula_Hoop = 120
  case Kite_Flying = 121
  case House_Riding = 122
  case Frisbee = 123
  case Fishing = 124
  case Equestrian_Sports = 125
  case Athletics = 126
  case Auto_Racing = 127
  case proceed = 253
  case pause = 254
  case end = 255
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NotificationType : Swift.Int {
  case phone = 0
  case messages = 1
  case wechat = 2
  case qq = 3
  case facebook = 4
  case twitter = 5
  case instagram = 6
  case skype = 7
  case whatsApp = 8
  case line = 9
  case kakaoTalk = 10
  case email = 11
  case messenger = 12
  case zalo = 13
  case telegram = 14
  case viber = 15
  case NateOn = 16
  case Gmail = 17
  case Calenda = 18
  case DailyHunt = 19
  case Outlook = 20
  case Yahoo = 21
  case Inshorts = 22
  case Phonepe = 23
  case Gpay = 24
  case Paytm = 25
  case Swiggy = 26
  case Zomato = 27
  case Uber = 28
  case Ola = 29
  case ReflexApp = 30
  case Snapchat = 31
  case YtMusic = 32
  case YouTube = 33
  case LinkEdin = 34
  case Amazon = 35
  case Flipkart = 36
  case NetFlix = 37
  case Hotstar = 38
  case AmazonPrime = 39
  case GoogleChat = 40
  case Wynk = 41
  case GoogleDrive = 42
  case Dunzo = 43
  case Gaana = 44
  case MissCall = 45
  case WhatsAppBusiness = 46
  case Dingtalk = 47
  case Tiktok = 48
  case Lyft = 49
  case Mail = 50
  case GoogleMaps = 51
  case Slack = 52
  case MicrosoftTeams = 53
  case MormaiiSmartwatches = 54
  case Reddit = 55
  case Discord = 56
  case Calendar = 57
  case Gojek = 58
  case Lark = 59
  case Garb = 60
  case Shopee = 61
  case Tokopedia = 62
  case others = 0x80
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CRPUpgradeState : Swift.Int {
  case uploading
  case completed
  case failed
  public func description() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ContentPosition : Swift.Int {
  case upper
  case under
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Content : Swift.Int {
  case none
  case date
  case sleep
  case hr
  case steps
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class HeartModel : ObjectiveC.NSObject {
  @objc public var starttime: Swift.Double
  @objc public var endtime: Swift.Double
  @objc public var detail: [Swift.Int]
  @objc public init(starttime: Swift.Double, endtime: Swift.Double, detail: [Swift.Int])
  @objc deinit
}
public func getCurrentLanguage() -> Swift.String
@objc @objcMembers public class weather : ObjectiveC.NSObject {
  @objc public var type: Swift.Int
  @objc public var temp: Swift.Int
  @objc public var pm25: Swift.Int
  @objc public var festival: Swift.String
  @objc public var city: Swift.String
  @objc public init(type: Swift.Int, temp: Swift.Int, pm25: Swift.Int, festival: Swift.String, city: Swift.String)
  @objc deinit
}
@objc @objcMembers public class forecastWeather : ObjectiveC.NSObject {
  @objc public var type: Swift.Int
  @objc public var maxTemp: Swift.Int
  @objc public var minTemp: Swift.Int
  @objc public init(type: Swift.Int, maxTemp: Swift.Int, minTemp: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class CRPNewWeather : ObjectiveC.NSObject {
  @objc public var type: Swift.Int
  @objc public var temp: Swift.Int
  @objc public var pm25: Swift.Int
  @objc public var city: Swift.String
  @objc public var sunriseHour: Swift.Int
  @objc public var sunriseMin: Swift.Int
  @objc public var sunsetHour: Swift.Int
  @objc public var sunsetMin: Swift.Int
  @objc public init(type: Swift.Int, temp: Swift.Int, pm25: Swift.Int, city: Swift.String, sunriseHour: Swift.Int, sunriseMin: Swift.Int, sunsetHour: Swift.Int, sunsetMin: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class periodTimeModel : ObjectiveC.NSObject {
  @objc public var startHour: Swift.Int
  @objc public var startMin: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public var endMin: Swift.Int
  @objc public init(startHour: Swift.Int, startMin: Swift.Int, endHour: Swift.Int, endMin: Swift.Int)
  @objc deinit
}
@objc public enum upgradeType : Swift.Int {
  case normal
  case bate
  case forced
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class newVersionInfo : ObjectiveC.NSObject {
  @objc public var type: CRPSmartBand.upgradeType
  @objc public var version: Swift.String?
  @objc public var log: Swift.String?
  @objc public var logEN: Swift.String?
  @objc public var mcu: Swift.Int
  @objc public var md5: Swift.String?
  @objc public var fileUrl: Swift.String?
  @objc public init(type: CRPSmartBand.upgradeType, version: Swift.String, log: Swift.String, logEN: Swift.String, mcu: Swift.Int, md5: Swift.String, fileUrl: Swift.String)
  @objc deinit
}
@objc @objcMembers public class newVersionTpInfo : ObjectiveC.NSObject {
  @objc public var tp_path: Swift.String?
  @objc public var tp_md5: Swift.String?
  @objc public var tp_offset: Swift.Int
  @objc public init(tp_path: Swift.String, tp_md5: Swift.String, tp_offset: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class ScreenContent : ObjectiveC.NSObject {
  @objc public var position: CRPSmartBand.ContentPosition
  @objc public var upperContent: CRPSmartBand.Content
  @objc public var underContent: CRPSmartBand.Content
  @objc public var contentColor: UIKit.UIColor
  @objc public var md5: Swift.String
  @objc public init(position: CRPSmartBand.ContentPosition, upperContent: CRPSmartBand.Content, underContent: CRPSmartBand.Content, contentColor: UIKit.UIColor, md5: Swift.String)
  @objc deinit
}
@objc @objcMembers public class ScreenImageSize : ObjectiveC.NSObject {
  @objc public var originalWidth: Swift.Int
  @objc public var originalHeight: Swift.Int
  @objc public var abbreviatedWidth: Swift.Int
  @objc public var abbreviatedHeight: Swift.Int
  @objc public init(originalWidth: Swift.Int = 240, originalHeight: Swift.Int = 240, abbreviatedWidth: Swift.Int = 0, abbreviatedHeight: Swift.Int = 0)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class watchFaceInfo : ObjectiveC.NSObject {
  @objc public var id: Swift.Int
  @objc public var model: Swift.Int
  @objc public var fileUrl: Swift.String
  @objc public var imageUrl: Swift.String
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class watchFaceSupportModel : ObjectiveC.NSObject {
  @objc public var supportModel: [Swift.Int]
  @objc public var currentID: Swift.Int
  @objc deinit
}
@objc @objcMembers public class Physiological : ObjectiveC.NSObject {
  @objc public var reminderModels: [Swift.Int]
  @objc public var cycleTime: Swift.Int
  @objc public var menstruationTime: Swift.Int
  @objc public var lastTimeMonth: Swift.Int
  @objc public var lastTimeDay: Swift.Int
  @objc public var remindTimeHour: Swift.Int
  @objc public var remindTimeMinute: Swift.Int
  @objc public init(reminderModels: [Swift.Int], cycleTime: Swift.Int, menstruationTime: Swift.Int, lastTimeMonth: Swift.Int, lastTimeDay: Swift.Int, remindTimeHour: Swift.Int, remindTimeMinute: Swift.Int)
  @objc deinit
}
@objc public enum reminderModel : Swift.Int {
  case menstruation
  case ovulation
  case ovulationPeak
  case ovulationEnd
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ecgState : Swift.Int {
  case handOn
  case handout
  case fail
  case syncSuccess
  case complete
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class SitRemindModel : ObjectiveC.NSObject {
  @objc public var period: Swift.Int
  @objc public var steps: Swift.Int
  @objc public var startHour: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public init(period: Swift.Int, steps: Swift.Int, startHour: Swift.Int, endHour: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class eventRemind : ObjectiveC.NSObject {
  @objc public var isRemind: Swift.Bool
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var remindCount: Swift.Int
  @objc public var remindTimeInterval: Swift.Int
  @objc public init(isRemind: Swift.Bool, startHour: Swift.Int, startMinute: Swift.Int, remindCount: Swift.Int, remindTimeInterval: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class drinkWaterRemind : ObjectiveC.NSObject {
  @objc public var isRemind: Swift.Bool
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var remindCount: Swift.Int
  @objc public var remindTimeInterval: Swift.Int
  @objc public var waterIntake: Swift.Int
  @objc public init(isRemind: Swift.Bool, startHour: Swift.Int, startMinute: Swift.Int, remindCount: Swift.Int, remindTimeInterval: Swift.Int, waterIntake: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class hrRemind : ObjectiveC.NSObject {
  @objc public var isRemind: Swift.Bool
  @objc public var max: Swift.Int
  @objc public init(isRemind: Swift.Bool, max: Swift.Int)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class contactProfileModel : ObjectiveC.NSObject {
  @objc public var contactMax: Swift.Int
  @objc public var contactAvatarWidth: Swift.Int
  @objc public var contactAvatarHeight: Swift.Int
  @objc public var contactNameLimit: Swift.Int
  @objc deinit
}
@objc @objcMembers public class CRPContact : ObjectiveC.NSObject {
  @objc final public let contactID: Swift.Int
  @objc final public let fullName: Swift.String
  @objc final public let image: UIKit.UIImage
  @objc final public let selectPhoneNumber: Swift.String
  @objc public init(contactID: Swift.Int, fullName: Swift.String, image: UIKit.UIImage, phoneNumber: Swift.String)
  @objc deinit
}
@objc @objcMembers public class CRPEmergencyContact : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let phoneNumber: Swift.String
  @objc public init(name: Swift.String, phoneNumber: Swift.String)
  @objc deinit
}
@objc @objcMembers public class CRPHRVDataModel : ObjectiveC.NSObject {
  @objc public var time: Swift.Double
  @objc public var sportLevel: Swift.Int
  @objc public var detail: [Swift.Int]
  @objc public init(time: Swift.Double, sportLevel: Swift.Int, detail: [Swift.Int])
  @objc deinit
}
@objc @objcMembers public class CRPMedicineReminderModel : ObjectiveC.NSObject {
  @objc public var medincineID: Swift.Int
  @objc public var pastDay: Swift.Int
  @objc public var medincineName: Swift.String
  @objc public var cycleTime: Swift.Int
  @objc public var reminderTimes: [CRPSmartBand.CRPMedicineTimeModel]
  @objc public init(medincineID: Swift.Int, pastDay: Swift.Int, medincineName: Swift.String, cycleTime: Swift.Int, reminderTimes: [CRPSmartBand.CRPMedicineTimeModel])
  @objc deinit
}
@objc @objcMembers public class CRPMedicineTimeModel : ObjectiveC.NSObject {
  @objc public var remindTimeHour: Swift.Int
  @objc public var remindTimeMinute: Swift.Int
  @objc public var pillCount: Swift.Int
  @objc public init(remindTimeHour: Swift.Int, remindTimeMinute: Swift.Int, pillCount: Swift.Int)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPHeartRecordModel : ObjectiveC.NSObject {
  @objc public var value: Swift.Int
  @objc public var time: Swift.Int
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPBPRecordModel : ObjectiveC.NSObject {
  @objc public var SBP: Swift.Int
  @objc public var DBP: Swift.Int
  @objc public var time: Swift.Int
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPO2RecordModel : ObjectiveC.NSObject {
  @objc public var value: Swift.Int
  @objc public var time: Swift.Int
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPStressRecordModel : ObjectiveC.NSObject {
  @objc public var value: Swift.Int
  @objc public var time: Swift.Int
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPHRVRecordModel : ObjectiveC.NSObject {
  @objc public var value: Swift.Int
  @objc public var time: Swift.Int
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPNewSportModel : ObjectiveC.NSObject {
  @objc public var id: Swift.Int
  @objc public var startTime: Swift.Int
  @objc public var endTime: Swift.Int
  @objc public var vaildTime: Swift.Int
  @objc public var type: CRPSmartBand.SportType
  @objc public var step: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var kcal: Swift.Int
  @objc public var heartRate: [Swift.Int]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPSportRecord : ObjectiveC.NSObject {
  @objc public var id: Swift.Int
  @objc public var startTime: Swift.Int
  @objc public var type: Swift.Int
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPUDTVersionModel : ObjectiveC.NSObject {
  @objc public var udtMaxSize: Swift.Int
  @objc public var udtVersion: Swift.String
  @objc deinit
}
@objc @objcMembers public class CRPExerciseGoalsModel : ObjectiveC.NSObject {
  @objc public var step: Swift.Int
  @objc public var kcal: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var exerciseTime: Swift.Int
  @objc public init(step: Swift.Int, kcal: Swift.Int, distance: Swift.Int, exerciseTime: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class CRPExerciseGoalStateModel : ObjectiveC.NSObject {
  @objc public var state: Swift.Int
  @objc public var weekday: [Swift.Int]
  @objc public init(state: Swift.Int, weekday: [Swift.Int])
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPEcardProfileModel : ObjectiveC.NSObject {
  @objc final public let eCardMax: Swift.Int
  @objc final public let eCardURLLimit: Swift.Int
  @objc final public let ids: [Swift.Int]
  @objc deinit
}
@objc @objcMembers public class CRPECard : ObjectiveC.NSObject {
  @objc final public let id: Swift.Int
  @objc final public let title: Swift.String
  @objc final public let url: Swift.String
  @objc public init(id: Swift.Int, title: Swift.String, url: Swift.String)
  @objc deinit
}
@objc @objcMembers public class CRPSleepDetectionInfo : ObjectiveC.NSObject {
  @objc public var startHour: Swift.Int
  @objc public var endHour: Swift.Int
  @objc public init(startHour: Swift.Int, endHour: Swift.Int)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPAutoLockTimeModel : ObjectiveC.NSObject {
  @objc public var AutoLockTime: Swift.Int
  @objc public var isSupportAlwaysBright: Swift.Int
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPPlatformModel : ObjectiveC.NSObject {
  @objc public var platform: CRPSmartBand.CRPPlatform
  @objc public var chip: Swift.Int
  @objc deinit
}
@objc @objcMembers public class CRPScreenMarketVersionModel : ObjectiveC.NSObject {
  @objc public var apiVersion: Swift.Int
  @objc public var funcVersion: Swift.Int
  @objc public init(apiVersion: Swift.Int, funcVersion: Swift.Int)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPNewWatchFaceSupportModel : ObjectiveC.NSObject {
  @objc public var supportModel: [Swift.Int]
  @objc public var currentID: Swift.Int
  @objc public var udtMaxSize: Swift.Int
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPNewSportingModel : ObjectiveC.NSObject {
  @objc public var startTime: Swift.Int
  @objc public var type: CRPSmartBand.CRPSportState
  @objc public var heartRate: Swift.Int
  @objc public var step: Swift.Int
  @objc public var sportTime: Swift.Int
  @objc public var distance: Swift.Int
  @objc public var kcal: Swift.Int
  @objc deinit
}
@objc public enum CRPSportState : Swift.Int {
  case unStart = 0
  case exercising = 1
  case pause = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPWorldClockProfileModel : ObjectiveC.NSObject {
  @objc final public let limitCount: Swift.Int
  @objc final public let ids: [Swift.Int]
  @objc deinit
}
@objc @objcMembers public class CRPWorldClockModel : ObjectiveC.NSObject {
  @objc public var id: Swift.Int
  @objc public var timeInterval: Swift.Int
  @objc public var cityName: Swift.String
  @objc public var longitude: Swift.Double
  @objc public var latitude: Swift.Double
  @objc public init(id: Swift.Int, timeInterval: Swift.Int, cityName: Swift.String, longitude: Swift.Double, latitude: Swift.Double)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class CRPBrightnessModel : ObjectiveC.NSObject {
  @objc public var brightness: Swift.Int
  @objc public var maxBrightness: Swift.Int
  @objc deinit
}
@objc @objcMembers public class CRPNewDrinkWaterRemind : ObjectiveC.NSObject {
  @objc public var isRemind: Swift.Bool
  @objc public var startHour: Swift.Int
  @objc public var startMinute: Swift.Int
  @objc public var remindCount: Swift.Int
  @objc public var remindTimeInterval: Swift.Int
  @objc public init(isRemind: Swift.Bool, startHour: Swift.Int, startMinute: Swift.Int, remindCount: Swift.Int, remindTimeInterval: Swift.Int)
  @objc deinit
}
@objc public enum CRPDrinkWaterSource : Swift.Int {
  case app = 0
  case watch = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class CRPNewDrinkWaterRecord : ObjectiveC.NSObject {
  @objc public var id: Swift.Int
  @objc public var hour: Swift.Int
  @objc public var minute: Swift.Int
  @objc public var waterIntake: Swift.Int
  @objc public init(id: Swift.Int, hour: Swift.Int, minute: Swift.Int, waterIntake: Swift.Int)
  @objc deinit
}
@objc @objcMembers public class CRPStockSelectionModel : ObjectiveC.NSObject {
  @objc public var id: Swift.Int
  @objc public var regularMarketOpen: Swift.Double
  @objc public var regularMarketDayHigh: Swift.Double
  @objc public var regularMarketDayLow: Swift.Double
  @objc public var regularMarketVolume: Swift.Int
  @objc public var peRatio: Swift.Double
  @objc public var marketCap: Swift.Int
  @objc public var fiftyTwoWeekHigh: Swift.Double
  @objc public var fiftyTwoWeekLow: Swift.Double
  @objc public var averageDailyVolume3Month: Swift.Int
  @objc public var regularMarketPrice: Swift.Double
  @objc public var currency: Swift.String
  @objc public var shortName: Swift.String
  @objc public var symbol: Swift.String
  @objc public var exchange: Swift.String
  @objc public var regularMarketPreviousClose: Swift.Double
  @objc public var isOpen: Swift.Bool
  @objc public init(id: Swift.Int, regularMarketOpen: Swift.Double, regularMarketDayHigh: Swift.Double, regularMarketDayLow: Swift.Double, regularMarketVolume: Swift.Int, peRatio: Swift.Double, marketCap: Swift.Int, fiftyTwoWeekHigh: Swift.Double, fiftyTwoWeekLow: Swift.Double, averageDailyVolume3Month: Swift.Int, regularMarketPrice: Swift.Double, currency: Swift.String, shortName: Swift.String, symbol: Swift.String, exchange: Swift.String, regularMarketPreviousClose: Swift.Double, isOpen: Swift.Bool)
  @objc deinit
}
@objc public enum CRPGPTRequestState : Swift.Int {
  case ready
  case cancel
  case parseFail
  case parseSuccess
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CRPGPTReplyState : Swift.UInt8 {
  case ready = 0x02
  case noNetWork = 0x0B
  case nomMcrophone = 0x09
  case chatgptAPIFail = 0x0C
  case speechFail = 0x0A
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum CRPGPTType : Swift.Int {
  case none = 0
  case chat = 1
  case aiWatchFace = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GPTShowType : Swift.Int {
  case none = 0
  case DaGPT = 1
  case AIWatch = 2
  case DaGPTWithAIWatch = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum CRPPairState : Swift.Int {
  case fail = 0
  case success = 1
  case wairPair = 0xFF
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objcMembers public class CRPCalendarModel {
  @objc public var id: Swift.Int
  @objc public var title: Swift.String
  @objc public var startTime: Foundation.Date
  @objc public var endTime: Foundation.Date
  @objc public init(id: Swift.Int, title: Swift.String, startTime: Foundation.Date, endTime: Foundation.Date)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class CRPCalendarConfigModel {
  @objc final public let limit: Swift.Int
  final public let records: [CRPSmartBand.CRPCalendarRecordModel]
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class CRPCalendarRecordModel {
  @objc final public let id: Swift.Int
  @objc final public let time: Swift.Int
  @objc deinit
}
@objcMembers public class CRPCalendarRemindModel {
  @objc public var isRemind: Swift.Bool
  @objc public var remindTime: Swift.Int
  @objc public init(isRemind: Swift.Bool, remindTime: Swift.Int)
  @objc deinit
}
public typealias scanCompletionHandler = ((_ result: [CRPSmartBand.CRPDiscovery]?, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias scanProgressHandler = ((_ newDiscoveries: [CRPSmartBand.CRPDiscovery]) -> Swift.Void)
public typealias bindHandler = ((_ state: CRPSmartBand.CRPState, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias removeHandler = ((_ state: CRPSmartBand.CRPState, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias stepHandler = ((_ stepModel: CRPSmartBand.StepModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias sleepHandler = ((_ sleepModel: CRPSmartBand.SleepModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias allDataHandler = ((_ stepModels: [CRPSmartBand.StepModel], _ sleepModels: [CRPSmartBand.SleepModel], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias intHandler = ((_ value: Swift.Int, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias intsHandler = ((_ value: [Swift.Int], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias stringHandler = ((_ value: Swift.String, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias featuresHandler = ((_ value: [Swift.Int], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias featuresHandlerForOC = ((_ value: [CRPSmartBand.CRPFeature], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias profileHandler = ((_ value: CRPSmartBand.ProfileModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias alarmHandler = ((_ value: [CRPSmartBand.AlarmModel], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias notificationsHandler = ((_ value: [Swift.Int], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias sportHandler = ((_ sportModels: [CRPSmartBand.SportModel], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias periodTimeHandler = ((_ periodTime: CRPSmartBand.periodTimeModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias versionHandler = ((_ info: CRPSmartBand.newVersionInfo?, _ tpInfo: CRPSmartBand.newVersionTpInfo?, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias screenContentHandler = ((_ content: CRPSmartBand.ScreenContent, _ imageSize: CRPSmartBand.ScreenImageSize, _ compressionType: Swift.Int, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias connectedPeripherialHandler = ((_ peripherals: [CoreBluetooth.CBPeripheral], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias watchFaceHandler = ((_ watchFace: [CRPSmartBand.watchFaceInfo], _ total: Swift.Int, _ count: Swift.Int, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias watchFaceSupportHandler = ((_ supportModel: CRPSmartBand.watchFaceSupportModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias newWatchFaceSupportHandler = ((_ supportModel: CRPSmartBand.CRPNewWatchFaceSupportModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias physiologicalHandler = (_ physiological: CRPSmartBand.Physiological, _ error: CRPSmartBand.CRPError) -> Swift.Void
public typealias sitRemindHandler = (_ sitRemind: CRPSmartBand.SitRemindModel, _ error: CRPSmartBand.CRPError) -> Swift.Void
public typealias doublesHandler = ((_ value: [Swift.Double], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias hrRemindHandler = ((_ model: CRPSmartBand.hrRemind, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias reminderHandler = ((_ model: CRPSmartBand.eventRemind, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias drinkWaterHandler = ((_ model: CRPSmartBand.drinkWaterRemind, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias contactProfileHandler = ((_ model: CRPSmartBand.contactProfileModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias hrvDataHandler = ((_ data: CRPSmartBand.CRPHRVDataModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias heartRecordDataHandler = ((_ heartRecordModels: [CRPSmartBand.CRPHeartRecordModel], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias bpRecordDataHandler = ((_ bpRecordModels: [CRPSmartBand.CRPBPRecordModel], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias o2RecordDataHandler = ((_ o2RecordModels: [CRPSmartBand.CRPO2RecordModel], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias sportDetailHandler = ((_ sportModel: CRPSmartBand.CRPNewSportModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias stressRecordDataHandler = ((_ stressRecordModels: [CRPSmartBand.CRPStressRecordModel], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias hrvRecordDataHandler = ((_ hrvRecordModels: [CRPSmartBand.CRPHRVRecordModel], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias exerciseGoalDateHandler = ((_ exerciseGoalsModel: CRPSmartBand.CRPExerciseGoalsModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias exerciseGoalStateHandler = ((_ exerciseGoalsStateModel: CRPSmartBand.CRPExerciseGoalStateModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias eCardProfileHandler = ((_ model: CRPSmartBand.CRPEcardProfileModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias eCardInfoHandler = ((_ model: CRPSmartBand.CRPECard, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias gpsDataHandler = ((_ startTime: Swift.Int, _ locals: [CoreLocation.CLLocationCoordinate2D], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias sleepDetectionInfoHandler = ((_ info: CRPSmartBand.CRPSleepDetectionInfo, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias fulldayDataHanlder = ((_ today: [Swift.Int], _ yesterday: [Swift.Int], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias autoLockTimeHandler = ((_ model: CRPSmartBand.CRPAutoLockTimeModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias historyStpeHander = ((_ day: Swift.Int, _ stepModel: CRPSmartBand.StepModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias historySleepHandler = ((_ day: Swift.Int, _ sleepModel: CRPSmartBand.SleepModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias historyHrHandler = ((_ day: Swift.Int, _ value: [Swift.Int], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias platformInfoHandler = ((_ model: CRPSmartBand.CRPPlatformModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias screenMarketVersionInfoHandler = ((_ model: CRPSmartBand.CRPScreenMarketVersionModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias watchFaceTagListHandler = ((_ tagList: [CRPSmartBand.CRPScreenTagModel], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias watchFaceListHandler = ((_ list: [CRPSmartBand.CRPScreenModel], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias watchFaceInfoHandler = ((_ watchFaceInfo: CRPSmartBand.CRPScreenModelInfo?, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias worldClockProfileHandler = ((_ model: CRPSmartBand.CRPWorldClockProfileModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias worldClockInfoHandler = ((_ model: CRPSmartBand.CRPWorldClockModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias brightnessInfoHandler = ((_ model: CRPSmartBand.CRPBrightnessModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias emergencyContactHandler = ((_ contact: CRPSmartBand.CRPEmergencyContact, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias drinkWaterRecordHandler = ((_ records: [CRPSmartBand.CRPNewDrinkWaterRecord], _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias newDrinkWaterRemindHandler = ((_ model: CRPSmartBand.CRPNewDrinkWaterRemind, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias gptSupportTypeHandler = ((_ type: CRPSmartBand.GPTShowType, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias calendarHandler = ((_ model: CRPSmartBand.CRPCalendarModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias calendarConfigHandler = ((_ model: CRPSmartBand.CRPCalendarConfigModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public typealias calendarRemindHandler = ((_ model: CRPSmartBand.CRPCalendarRemindModel, _ error: CRPSmartBand.CRPError) -> Swift.Void)
public enum CRPAFError : Swift.Error {
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: any Swift.Error)
    case propertyListEncodingFailed(error: any Swift.Error)
  }
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: any Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: any Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: any Swift.Error)
    case inputStreamReadFailed(error: any Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNil
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: any Swift.Error)
    case propertyListSerializationFailed(error: any Swift.Error)
  }
  case invalidURL(url: any CRPSmartBand.CRPURLConvertible)
  case parameterEncodingFailed(reason: CRPSmartBand.CRPAFError.ParameterEncodingFailureReason)
  case multipartEncodingFailed(reason: CRPSmartBand.CRPAFError.MultipartEncodingFailureReason)
  case responseValidationFailed(reason: CRPSmartBand.CRPAFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: CRPSmartBand.CRPAFError.ResponseSerializationFailureReason)
}
extension CRPSmartBand.CRPAFError {
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
}
extension CRPSmartBand.CRPAFError {
  public var urlConvertible: (any CRPSmartBand.CRPURLConvertible)? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: (any Swift.Error)? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
}
extension CRPSmartBand.CRPAFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers open class RealTekUpgrade : ObjectiveC.NSObject, RTKOTASDK.RTKDFUUpgradeDelegate {
  @objc public static let sharedInstance: CRPSmartBand.RealTekUpgrade
  @objc override dynamic public init()
  @objc open func startUpgrade(info: CRPSmartBand.newVersionInfo?, timeoutInterval: Foundation.TimeInterval = 5)
  @objc public func dfuUpgrade(_ task: RTKOTASDK.RTKDFUUpgrade, didFinishUpgradeWithError error: (any Swift.Error)?)
  @objc public func dfuUpgradeDidReady(for task: RTKOTASDK.RTKDFUUpgrade)
  @objc public func dfuUpgrade(_ task: RTKOTASDK.RTKDFUUpgrade, withDevice connection: RTKLEFoundation.RTKProfileConnection, didSendBytesCount length: Swift.UInt, ofImage image: RTKOTASDK.RTKOTAUpgradeBin)
  @objc public func dfuUpgrade(_ task: RTKOTASDK.RTKDFUUpgrade, couldNotUpgradeWithError error: any Swift.Error)
  @objc public func dfuUpgrade(_ task: RTKOTASDK.RTKDFUUpgrade, withDevice connection: RTKLEFoundation.RTKProfileConnection, willSendImage image: RTKOTASDK.RTKOTAUpgradeBin)
  @objc public func dfuUpgrade(_ task: RTKOTASDK.RTKDFUUpgrade, withDevice connection: RTKLEFoundation.RTKProfileConnection, didCompleteSendImage image: RTKOTASDK.RTKOTAUpgradeBin)
  @objc public func dfuUpgrade(_ task: RTKOTASDK.RTKDFUUpgrade, withDevice connection: RTKLEFoundation.RTKProfileConnection, didActivateImages images: Swift.Set<RTKOTASDK.RTKOTAUpgradeBin>)
  @objc deinit
}
extension CRPSmartBand.CRPHTTPMethod : Swift.Equatable {}
extension CRPSmartBand.CRPHTTPMethod : Swift.Hashable {}
extension CRPSmartBand.CRPHTTPMethod : Swift.RawRepresentable {}
extension CRPSmartBand.CRPURLEncoding.Destination : Swift.Equatable {}
extension CRPSmartBand.CRPURLEncoding.Destination : Swift.Hashable {}
extension CRPSmartBand.CRPURLEncoding.ArrayEncoding : Swift.Equatable {}
extension CRPSmartBand.CRPURLEncoding.ArrayEncoding : Swift.Hashable {}
extension CRPSmartBand.CRPURLEncoding.BoolEncoding : Swift.Equatable {}
extension CRPSmartBand.CRPURLEncoding.BoolEncoding : Swift.Hashable {}
extension CRPSmartBand.CRPPlatform : Swift.Equatable {}
extension CRPSmartBand.CRPPlatform : Swift.Hashable {}
extension CRPSmartBand.CRPPlatform : Swift.RawRepresentable {}
extension CRPSmartBand.CRPNordicChip : Swift.Equatable {}
extension CRPSmartBand.CRPNordicChip : Swift.Hashable {}
extension CRPSmartBand.CRPNordicChip : Swift.RawRepresentable {}
extension CRPSmartBand.CRPHuntersunChip : Swift.Equatable {}
extension CRPSmartBand.CRPHuntersunChip : Swift.Hashable {}
extension CRPSmartBand.CRPHuntersunChip : Swift.RawRepresentable {}
extension CRPSmartBand.CRPRealtekChip : Swift.Equatable {}
extension CRPSmartBand.CRPRealtekChip : Swift.Hashable {}
extension CRPSmartBand.CRPRealtekChip : Swift.RawRepresentable {}
extension CRPSmartBand.CRPGoodixChip : Swift.Equatable {}
extension CRPSmartBand.CRPGoodixChip : Swift.Hashable {}
extension CRPSmartBand.CRPGoodixChip : Swift.RawRepresentable {}
extension CRPSmartBand.CRPSifliChip : Swift.Equatable {}
extension CRPSmartBand.CRPSifliChip : Swift.Hashable {}
extension CRPSmartBand.CRPSifliChip : Swift.RawRepresentable {}
extension CRPSmartBand.CRPJieLiChip : Swift.Equatable {}
extension CRPSmartBand.CRPJieLiChip : Swift.Hashable {}
extension CRPSmartBand.CRPJieLiChip : Swift.RawRepresentable {}
extension CRPSmartBand.CRPNetworkReachabilityManager.ConnectionType : Swift.Equatable {}
extension CRPSmartBand.CRPNetworkReachabilityManager.ConnectionType : Swift.Hashable {}
extension CRPSmartBand.CRPState : Swift.Equatable {}
extension CRPSmartBand.CRPState : Swift.Hashable {}
extension CRPSmartBand.CRPState : Swift.RawRepresentable {}
extension CRPSmartBand.CRPBluetoothState : Swift.Equatable {}
extension CRPSmartBand.CRPBluetoothState : Swift.Hashable {}
extension CRPSmartBand.CRPBluetoothState : Swift.RawRepresentable {}
extension CRPSmartBand.CRPError : Swift.Equatable {}
extension CRPSmartBand.CRPError : Swift.Hashable {}
extension CRPSmartBand.CRPError : Swift.RawRepresentable {}
extension CRPSmartBand.CRPOptions : Swift.Equatable {}
extension CRPSmartBand.CRPOptions : Swift.Hashable {}
extension CRPSmartBand.CRPOptions : Swift.RawRepresentable {}
extension CRPSmartBand.CRPFeature : Swift.Equatable {}
extension CRPSmartBand.CRPFeature : Swift.Hashable {}
extension CRPSmartBand.CRPFeature : Swift.RawRepresentable {}
extension CRPSmartBand.GenderOption : Swift.Equatable {}
extension CRPSmartBand.GenderOption : Swift.Hashable {}
extension CRPSmartBand.GenderOption : Swift.RawRepresentable {}
extension CRPSmartBand.AlarmType : Swift.Equatable {}
extension CRPSmartBand.AlarmType : Swift.Hashable {}
extension CRPSmartBand.AlarmType : Swift.RawRepresentable {}
extension CRPSmartBand.CRPWeekDay : Swift.Equatable {}
extension CRPSmartBand.CRPWeekDay : Swift.Hashable {}
extension CRPSmartBand.CRPWeekDay : Swift.RawRepresentable {}
extension CRPSmartBand.SportType : Swift.Equatable {}
extension CRPSmartBand.SportType : Swift.Hashable {}
extension CRPSmartBand.SportType : Swift.RawRepresentable {}
extension CRPSmartBand.NotificationType : Swift.Equatable {}
extension CRPSmartBand.NotificationType : Swift.Hashable {}
extension CRPSmartBand.NotificationType : Swift.RawRepresentable {}
extension CRPSmartBand.CRPUpgradeState : Swift.Equatable {}
extension CRPSmartBand.CRPUpgradeState : Swift.Hashable {}
extension CRPSmartBand.CRPUpgradeState : Swift.RawRepresentable {}
extension CRPSmartBand.ContentPosition : Swift.Equatable {}
extension CRPSmartBand.ContentPosition : Swift.Hashable {}
extension CRPSmartBand.ContentPosition : Swift.RawRepresentable {}
extension CRPSmartBand.Content : Swift.Equatable {}
extension CRPSmartBand.Content : Swift.Hashable {}
extension CRPSmartBand.Content : Swift.RawRepresentable {}
extension CRPSmartBand.upgradeType : Swift.Equatable {}
extension CRPSmartBand.upgradeType : Swift.Hashable {}
extension CRPSmartBand.upgradeType : Swift.RawRepresentable {}
extension CRPSmartBand.reminderModel : Swift.Equatable {}
extension CRPSmartBand.reminderModel : Swift.Hashable {}
extension CRPSmartBand.reminderModel : Swift.RawRepresentable {}
extension CRPSmartBand.ecgState : Swift.Equatable {}
extension CRPSmartBand.ecgState : Swift.Hashable {}
extension CRPSmartBand.ecgState : Swift.RawRepresentable {}
extension CRPSmartBand.CRPSportState : Swift.Equatable {}
extension CRPSmartBand.CRPSportState : Swift.Hashable {}
extension CRPSmartBand.CRPSportState : Swift.RawRepresentable {}
extension CRPSmartBand.CRPDrinkWaterSource : Swift.Equatable {}
extension CRPSmartBand.CRPDrinkWaterSource : Swift.Hashable {}
extension CRPSmartBand.CRPDrinkWaterSource : Swift.RawRepresentable {}
extension CRPSmartBand.CRPGPTRequestState : Swift.Equatable {}
extension CRPSmartBand.CRPGPTRequestState : Swift.Hashable {}
extension CRPSmartBand.CRPGPTRequestState : Swift.RawRepresentable {}
extension CRPSmartBand.CRPGPTReplyState : Swift.Equatable {}
extension CRPSmartBand.CRPGPTReplyState : Swift.Hashable {}
extension CRPSmartBand.CRPGPTReplyState : Swift.RawRepresentable {}
extension CRPSmartBand.CRPGPTType : Swift.Equatable {}
extension CRPSmartBand.CRPGPTType : Swift.Hashable {}
extension CRPSmartBand.CRPGPTType : Swift.RawRepresentable {}
extension CRPSmartBand.GPTShowType : Swift.Equatable {}
extension CRPSmartBand.GPTShowType : Swift.Hashable {}
extension CRPSmartBand.GPTShowType : Swift.RawRepresentable {}
extension CRPSmartBand.CRPPairState : Swift.Equatable {}
extension CRPSmartBand.CRPPairState : Swift.Hashable {}
extension CRPSmartBand.CRPPairState : Swift.RawRepresentable {}
